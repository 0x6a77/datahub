(window.webpackJsonp=window.webpackJsonp||[]).push([[14],{163:function(e,a,t){"use strict";function n(){return(n=Object.assign||function(e){for(var a=1;a<arguments.length;a++){var t=arguments[a];for(var n in t)Object.prototype.hasOwnProperty.call(t,n)&&(e[n]=t[n])}return e}).apply(this,arguments)}t.d(a,"a",(function(){return n}))},164:function(e,a,t){"use strict";function n(e,a){if(null==e)return{};var t,n,l={},i=Object.keys(e);for(n=0;n<i.length;n++)t=i[n],a.indexOf(t)>=0||(l[t]=e[t]);return l}t.d(a,"a",(function(){return n}))},165:function(e,a,t){"use strict";t.d(a,"a",(function(){return d})),t.d(a,"b",(function(){return m}));var n=t(0),l=t.n(n);function i(e,a,t){return a in e?Object.defineProperty(e,a,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[a]=t,e}function r(e,a){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);a&&(n=n.filter((function(a){return Object.getOwnPropertyDescriptor(e,a).enumerable}))),t.push.apply(t,n)}return t}function s(e){for(var a=1;a<arguments.length;a++){var t=null!=arguments[a]?arguments[a]:{};a%2?r(Object(t),!0).forEach((function(a){i(e,a,t[a])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):r(Object(t)).forEach((function(a){Object.defineProperty(e,a,Object.getOwnPropertyDescriptor(t,a))}))}return e}function o(e,a){if(null==e)return{};var t,n,l=function(e,a){if(null==e)return{};var t,n,l={},i=Object.keys(e);for(n=0;n<i.length;n++)t=i[n],a.indexOf(t)>=0||(l[t]=e[t]);return l}(e,a);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)t=i[n],a.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(l[t]=e[t])}return l}var c=l.a.createContext({}),b=function(e){var a=l.a.useContext(c),t=a;return e&&(t="function"==typeof e?e(a):s(s({},a),e)),t},d=function(e){var a=b(e.components);return l.a.createElement(c.Provider,{value:a},e.children)},u={inlineCode:"code",wrapper:function(e){var a=e.children;return l.a.createElement(l.a.Fragment,{},a)}},p=l.a.forwardRef((function(e,a){var t=e.components,n=e.mdxType,i=e.originalType,r=e.parentName,c=o(e,["components","mdxType","originalType","parentName"]),d=b(t),p=n,m=d["".concat(r,".").concat(p)]||d[p]||u[p]||i;return t?l.a.createElement(m,s(s({ref:a},c),{},{components:t})):l.a.createElement(m,s({ref:a},c))}));function m(e,a){var t=arguments,n=a&&a.mdxType;if("string"==typeof e||n){var i=t.length,r=new Array(i);r[0]=p;var s={};for(var o in a)hasOwnProperty.call(a,o)&&(s[o]=a[o]);s.originalType=e,s.mdxType="string"==typeof e?e:n,r[1]=s;for(var c=2;c<i;c++)r[c]=t[c];return l.a.createElement.apply(null,r)}return l.a.createElement.apply(null,t)}p.displayName="MDXCreateElement"},81:function(e,a,t){"use strict";t.r(a),t.d(a,"frontMatter",(function(){return r})),t.d(a,"metadata",(function(){return s})),t.d(a,"rightToc",(function(){return o})),t.d(a,"default",(function(){return b}));var n=t(163),l=t(164),i=(t(0),t(165)),r={title:"Metadata Ingestion",hide_title:!0,slug:"/metadata-ingestion",custom_edit_url:"https://github.com/linkedin/datahub/blob/master/metadata-ingestion/README.md"},s={unversionedId:"metadata-ingestion/README",id:"metadata-ingestion/README",isDocsHomePage:!1,title:"Metadata Ingestion",description:"DataHub Metadata Ingestion",source:"@site/genDocs/metadata-ingestion/README.md",slug:"/metadata-ingestion",permalink:"/docs/metadata-ingestion",editUrl:"https://github.com/linkedin/datahub/blob/master/metadata-ingestion/README.md",version:"current",sidebar:"overviewSidebar",previous:{title:"Debugging Guide",permalink:"/docs/debugging"},next:{title:"Architecture Overview",permalink:"/docs/architecture/architecture"}},o=[{value:"Getting Started",id:"getting-started",children:[{value:"Prerequisites",id:"prerequisites",children:[]},{value:"Install from PyPI",id:"install-from-pypi",children:[]},{value:"Install using Docker",id:"install-using-docker",children:[]},{value:"Install from source",id:"install-from-source",children:[]}]},{value:"Recipes",id:"recipes",children:[]},{value:"Sources",id:"sources",children:[{value:"Kafka Metadata <code>kafka</code>",id:"kafka-metadata-kafka",children:[]},{value:"MySQL Metadata <code>mysql</code>",id:"mysql-metadata-mysql",children:[]},{value:"Microsoft SQL Server Metadata <code>mssql</code>",id:"microsoft-sql-server-metadata-mssql",children:[]},{value:"Hive <code>hive</code>",id:"hive-hive",children:[]},{value:"PostgreSQL <code>postgres</code>",id:"postgresql-postgres",children:[]},{value:"Snowflake <code>snowflake</code>",id:"snowflake-snowflake",children:[]},{value:"Oracle <code>oracle</code>",id:"oracle-oracle",children:[]},{value:"Google BigQuery <code>bigquery</code>",id:"google-bigquery-bigquery",children:[]},{value:"AWS Athena <code>athena</code>",id:"aws-athena-athena",children:[]},{value:"AWS Glue <code>glue</code>",id:"aws-glue-glue",children:[]},{value:"Druid <code>druid</code>",id:"druid-druid",children:[]},{value:"Other databases using SQLAlchemy <code>sqlalchemy</code>",id:"other-databases-using-sqlalchemy-sqlalchemy",children:[]},{value:"MongoDB <code>mongodb</code>",id:"mongodb-mongodb",children:[]},{value:"LDAP <code>ldap</code>",id:"ldap-ldap",children:[]},{value:"File <code>file</code>",id:"file-file",children:[]},{value:"DBT <code>dbt</code>",id:"dbt-dbt",children:[]}]},{value:"Sinks",id:"sinks",children:[{value:"DataHub Rest <code>datahub-rest</code>",id:"datahub-rest-datahub-rest",children:[]},{value:"DataHub Kafka <code>datahub-kafka</code>",id:"datahub-kafka-datahub-kafka",children:[]},{value:"Console <code>console</code>",id:"console-console",children:[]},{value:"File <code>file</code>",id:"file-file-1",children:[]}]},{value:"Using as a library",id:"using-as-a-library",children:[]},{value:"Usage with Airflow",id:"usage-with-airflow",children:[{value:"Running ingestion on a schedule",id:"running-ingestion-on-a-schedule",children:[]},{value:"Emitting lineage via a separate operator",id:"emitting-lineage-via-a-separate-operator",children:[]},{value:"Using Datahub&#39;s Airflow lineage backend",id:"using-datahubs-airflow-lineage-backend",children:[]}]},{value:"Developing",id:"developing",children:[]}],c={rightToc:o};function b(e){var a=e.components,t=Object(l.a)(e,["components"]);return Object(i.b)("wrapper",Object(n.a)({},c,t,{components:a,mdxType:"MDXLayout"}),Object(i.b)("h1",{id:"datahub-metadata-ingestion"},"DataHub Metadata Ingestion"),Object(i.b)("p",null,Object(i.b)("img",{parentName:"p",src:"https://img.shields.io/badge/python-3.6%2B-blue",alt:"Python version 3.6+"})),Object(i.b)("p",null,"This module hosts an extensible Python-based metadata ingestion system for DataHub.\nThis supports sending data to DataHub using Kafka or through the REST API.\nIt can be used through our CLI tool, with an orchestrator like Airflow, or as a library."),Object(i.b)("h2",{id:"getting-started"},"Getting Started"),Object(i.b)("h3",{id:"prerequisites"},"Prerequisites"),Object(i.b)("p",null,"Before running any metadata ingestion job, you should make sure that DataHub backend services are all running. If you are trying this out locally, the easiest way to do that is through ",Object(i.b)("a",{parentName:"p",href:"https://github.com/linkedin/datahub/blob/master/docker"},"quickstart Docker images"),"."),Object(i.b)("h3",{id:"install-from-pypi"},"Install from PyPI"),Object(i.b)("p",null,"The folks over at ",Object(i.b)("a",{parentName:"p",href:"https://www.acryl.io/"},"Acryl")," maintain a PyPI package for DataHub metadata ingestion."),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-sh"},'# Requires Python 3.6+\npython3 -m pip install --upgrade pip wheel setuptools\npython3 -m pip uninstall datahub acryl-datahub || true  # sanity check - ok if it fails\npython3 -m pip install --upgrade acryl-datahub\ndatahub version\n# If you see "command not found", try running this instead: python3 -m datahub version\n')),Object(i.b)("p",null,"If you run into an error, try checking the ",Object(i.b)("a",{parentName:"p",href:"/docs/metadata-ingestion/developing#Common-setup-issues"},Object(i.b)("em",{parentName:"a"},"common setup issues")),"."),Object(i.b)("h4",{id:"installing-plugins"},"Installing Plugins"),Object(i.b)("p",null,"We use a plugin architecture so that you can install only the dependencies you actually need."),Object(i.b)("table",null,Object(i.b)("thead",{parentName:"table"},Object(i.b)("tr",{parentName:"thead"},Object(i.b)("th",{parentName:"tr",align:null},"Plugin Name"),Object(i.b)("th",{parentName:"tr",align:null},"Install Command"),Object(i.b)("th",{parentName:"tr",align:null},"Provides"))),Object(i.b)("tbody",{parentName:"table"},Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",{parentName:"tr",align:null},"file"),Object(i.b)("td",{parentName:"tr",align:null},Object(i.b)("em",{parentName:"td"},"included by default")),Object(i.b)("td",{parentName:"tr",align:null},"File source and sink")),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",{parentName:"tr",align:null},"console"),Object(i.b)("td",{parentName:"tr",align:null},Object(i.b)("em",{parentName:"td"},"included by default")),Object(i.b)("td",{parentName:"tr",align:null},"Console sink")),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",{parentName:"tr",align:null},"athena"),Object(i.b)("td",{parentName:"tr",align:null},Object(i.b)("inlineCode",{parentName:"td"},"pip install 'acryl-datahub[athena]'")),Object(i.b)("td",{parentName:"tr",align:null},"AWS Athena source")),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",{parentName:"tr",align:null},"bigquery"),Object(i.b)("td",{parentName:"tr",align:null},Object(i.b)("inlineCode",{parentName:"td"},"pip install 'acryl-datahub[bigquery]'")),Object(i.b)("td",{parentName:"tr",align:null},"BigQuery source")),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",{parentName:"tr",align:null},"glue"),Object(i.b)("td",{parentName:"tr",align:null},Object(i.b)("inlineCode",{parentName:"td"},"pip install 'acryl-datahub[glue]'")),Object(i.b)("td",{parentName:"tr",align:null},"AWS Glue source")),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",{parentName:"tr",align:null},"hive"),Object(i.b)("td",{parentName:"tr",align:null},Object(i.b)("inlineCode",{parentName:"td"},"pip install 'acryl-datahub[hive]'")),Object(i.b)("td",{parentName:"tr",align:null},"Hive source")),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",{parentName:"tr",align:null},"mssql"),Object(i.b)("td",{parentName:"tr",align:null},Object(i.b)("inlineCode",{parentName:"td"},"pip install 'acryl-datahub[mssql]'")),Object(i.b)("td",{parentName:"tr",align:null},"SQL Server source")),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",{parentName:"tr",align:null},"mysql"),Object(i.b)("td",{parentName:"tr",align:null},Object(i.b)("inlineCode",{parentName:"td"},"pip install 'acryl-datahub[mysql]'")),Object(i.b)("td",{parentName:"tr",align:null},"MySQL source")),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",{parentName:"tr",align:null},"oracle"),Object(i.b)("td",{parentName:"tr",align:null},Object(i.b)("inlineCode",{parentName:"td"},"pip install 'acryl-datahub[oracle]'")),Object(i.b)("td",{parentName:"tr",align:null},"Oracle source")),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",{parentName:"tr",align:null},"postgres"),Object(i.b)("td",{parentName:"tr",align:null},Object(i.b)("inlineCode",{parentName:"td"},"pip install 'acryl-datahub[postgres]'")),Object(i.b)("td",{parentName:"tr",align:null},"Postgres source")),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",{parentName:"tr",align:null},"sqlalchemy"),Object(i.b)("td",{parentName:"tr",align:null},Object(i.b)("inlineCode",{parentName:"td"},"pip install 'acryl-datahub[sqlalchemy]'")),Object(i.b)("td",{parentName:"tr",align:null},"Generic SQLAlchemy source")),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",{parentName:"tr",align:null},"snowflake"),Object(i.b)("td",{parentName:"tr",align:null},Object(i.b)("inlineCode",{parentName:"td"},"pip install 'acryl-datahub[snowflake]'")),Object(i.b)("td",{parentName:"tr",align:null},"Snowflake source")),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",{parentName:"tr",align:null},"mongodb"),Object(i.b)("td",{parentName:"tr",align:null},Object(i.b)("inlineCode",{parentName:"td"},"pip install 'acryl-datahub[mongodb]'")),Object(i.b)("td",{parentName:"tr",align:null},"MongoDB source")),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",{parentName:"tr",align:null},"ldap"),Object(i.b)("td",{parentName:"tr",align:null},Object(i.b)("inlineCode",{parentName:"td"},"pip install 'acryl-datahub[ldap]'")," (",Object(i.b)("a",{parentName:"td",href:"https://www.python-ldap.org/en/python-ldap-3.3.0/installing.html#build-prerequisites"},"extra requirements"),")"),Object(i.b)("td",{parentName:"tr",align:null},"LDAP source")),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",{parentName:"tr",align:null},"kakfa"),Object(i.b)("td",{parentName:"tr",align:null},Object(i.b)("inlineCode",{parentName:"td"},"pip install 'acryl-datahub[kafka]'")),Object(i.b)("td",{parentName:"tr",align:null},"Kafka source")),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",{parentName:"tr",align:null},"druid"),Object(i.b)("td",{parentName:"tr",align:null},Object(i.b)("inlineCode",{parentName:"td"},"pip install 'acryl-datahub[druid]'")),Object(i.b)("td",{parentName:"tr",align:null},"Druid Source")),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",{parentName:"tr",align:null},"dbt"),Object(i.b)("td",{parentName:"tr",align:null},Object(i.b)("em",{parentName:"td"},"no additional dependencies")),Object(i.b)("td",{parentName:"tr",align:null},"DBT source")),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",{parentName:"tr",align:null},"datahub-rest"),Object(i.b)("td",{parentName:"tr",align:null},Object(i.b)("inlineCode",{parentName:"td"},"pip install 'acryl-datahub[datahub-rest]'")),Object(i.b)("td",{parentName:"tr",align:null},"DataHub sink over REST API")),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",{parentName:"tr",align:null},"datahub-kafka"),Object(i.b)("td",{parentName:"tr",align:null},Object(i.b)("inlineCode",{parentName:"td"},"pip install 'acryl-datahub[datahub-kafka]'")),Object(i.b)("td",{parentName:"tr",align:null},"DataHub sink over Kafka")))),Object(i.b)("p",null,"These plugins can be mixed and matched as desired. For example:"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-sh"},"pip install 'acryl-datahub[bigquery,datahub-rest]'\n")),Object(i.b)("p",null,"You can check the active plugins:"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-sh"},"datahub check plugins\n")),Object(i.b)("h4",{id:"basic-usage"},"Basic Usage"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-sh"},"pip install 'acryl-datahub[datahub-rest]'  # install the required plugin\ndatahub ingest -c ./examples/recipes/example_to_datahub_rest.yml\n")),Object(i.b)("h3",{id:"install-using-docker"},"Install using Docker"),Object(i.b)("p",null,Object(i.b)("a",{parentName:"p",href:"https://hub.docker.com/r/linkedin/datahub-ingestion"},Object(i.b)("img",{parentName:"a",src:"https://img.shields.io/docker/pulls/linkedin/datahub-ingestion?style=plastic",alt:"Docker Hub"})),"\n",Object(i.b)("a",{parentName:"p",href:"https://github.com/linkedin/datahub/actions/workflows/docker-ingestion.yml"},Object(i.b)("img",{parentName:"a",src:"https://github.com/linkedin/datahub/actions/workflows/docker-ingestion.yml/badge.svg",alt:"datahub-ingestion docker"}))),Object(i.b)("p",null,"If you don't want to install locally, you can alternatively run metadata ingestion within a Docker container.\nWe have prebuilt images available on ",Object(i.b)("a",{parentName:"p",href:"https://hub.docker.com/r/linkedin/datahub-ingestion"},"Docker hub"),". All plugins will be installed and enabled automatically."),Object(i.b)("p",null,Object(i.b)("em",{parentName:"p"},"Limitation: the datahub_docker.sh convenience script assumes that the recipe and any input/output files are accessible in the current working directory or its subdirectories. Files outside the current working directory will not be found, and you'll need to invoke the Docker image directly.")),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-sh"},"./scripts/datahub_docker.sh ingest -c ./examples/recipes/example_to_datahub_rest.yml\n")),Object(i.b)("h3",{id:"install-from-source"},"Install from source"),Object(i.b)("p",null,"If you'd like to install from source, see the ",Object(i.b)("a",{parentName:"p",href:"/docs/metadata-ingestion/developing"},"developer guide"),"."),Object(i.b)("h2",{id:"recipes"},"Recipes"),Object(i.b)("p",null,"A recipe is a configuration file that tells our ingestion scripts where to pull data from (source) and where to put it (sink).\nHere's a simple example that pulls metadata from MSSQL and puts it into datahub."),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-yaml"},'# A sample recipe that pulls metadata from MSSQL and puts it into DataHub\n# using the Rest API.\nsource:\n  type: mssql\n  config:\n    username: sa\n    password: ${MSSQL_PASSWORD}\n    database: DemoData\n\nsink:\n  type: "datahub-rest"\n  config:\n    server: "http://localhost:8080"\n')),Object(i.b)("p",null,"We automatically expand environment variables in the config,\nsimilar to variable substitution in GNU bash or in docker-compose files. For details, see\n",Object(i.b)("a",{parentName:"p",href:"https://docs.docker.com/compose/compose-file/compose-file-v2/#variable-substitution"},"https://docs.docker.com/compose/compose-file/compose-file-v2/#variable-substitution"),"."),Object(i.b)("p",null,"Running a recipe is quite easy."),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-sh"},"datahub ingest -c ./examples/recipes/mssql_to_datahub.yml\n")),Object(i.b)("p",null,"A number of recipes are included in the examples/recipes directory."),Object(i.b)("h2",{id:"sources"},"Sources"),Object(i.b)("h3",{id:"kafka-metadata-kafka"},"Kafka Metadata ",Object(i.b)("inlineCode",{parentName:"h3"},"kafka")),Object(i.b)("p",null,"Extracts:"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},"List of topics - from the Kafka broker"),Object(i.b)("li",{parentName:"ul"},"Schemas associated with each topic - from the schema registry")),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-yml"},'source:\n  type: "kafka"\n  config:\n    connection:\n      bootstrap: "broker:9092"\n      schema_registry_url: http://localhost:8081\n      consumer_config: {} # passed to https://docs.confluent.io/platform/current/clients/confluent-kafka-python/index.html#deserializingconsumer\n')),Object(i.b)("h3",{id:"mysql-metadata-mysql"},"MySQL Metadata ",Object(i.b)("inlineCode",{parentName:"h3"},"mysql")),Object(i.b)("p",null,"Extracts:"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},"List of databases and tables"),Object(i.b)("li",{parentName:"ul"},"Column types and schema associated with each table")),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-yml"},'source:\n  type: mysql\n  config:\n    username: root\n    password: example\n    database: dbname\n    host_port: localhost:3306\n    table_pattern:\n      deny:\n        # Note that the deny patterns take precedence over the allow patterns.\n        - "performance_schema"\n      allow:\n        - "schema1.table2"\n      # Although the \'table_pattern\' enables you to skip everything from certain schemas,\n      # having another option to allow/deny on schema level is an optimization for the case when there is a large number\n      # of schemas that one wants to skip and you want to avoid the time to needlessly fetch those tables only to filter\n      # them out afterwards via the table_pattern.\n    schema_pattern:\n      deny:\n        - "garbage_schema"\n      allow:\n        - "schema1"\n')),Object(i.b)("h3",{id:"microsoft-sql-server-metadata-mssql"},"Microsoft SQL Server Metadata ",Object(i.b)("inlineCode",{parentName:"h3"},"mssql")),Object(i.b)("p",null,"Extracts:"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},"List of databases, schema, and tables"),Object(i.b)("li",{parentName:"ul"},"Column types associated with each table")),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-yml"},'source:\n  type: mssql\n  config:\n    username: user\n    password: pass\n    host_port: localhost:1433\n    database: DemoDatabase\n    table_pattern:\n      deny:\n        - "^.*\\\\.sys_.*" # deny all tables that start with sys_\n      allow:\n        - "schema1.table1"\n        - "schema1.table2"\n    options:\n      # Any options specified here will be passed to SQLAlchemy\'s create_engine as kwargs.\n      # See https://docs.sqlalchemy.org/en/14/core/engines.html for details.\n      charset: "utf8"\n')),Object(i.b)("h3",{id:"hive-hive"},"Hive ",Object(i.b)("inlineCode",{parentName:"h3"},"hive")),Object(i.b)("p",null,"Extracts:"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},"List of databases, schema, and tables"),Object(i.b)("li",{parentName:"ul"},"Column types associated with each table")),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-yml"},"source:\n  type: hive\n  config:\n    username: user\n    password: pass\n    host_port: localhost:10000\n    database: DemoDatabase\n    # table_pattern/schema_pattern is same as above\n    # options is same as above\n")),Object(i.b)("h3",{id:"postgresql-postgres"},"PostgreSQL ",Object(i.b)("inlineCode",{parentName:"h3"},"postgres")),Object(i.b)("p",null,"Extracts:"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},"List of databases, schema, and tables"),Object(i.b)("li",{parentName:"ul"},"Column types associated with each table"),Object(i.b)("li",{parentName:"ul"},"Also supports PostGIS extensions")),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-yml"},"source:\n  type: postgres\n  config:\n    username: user\n    password: pass\n    host_port: localhost:5432\n    database: DemoDatabase\n    # table_pattern/schema_pattern is same as above\n    # options is same as above\n")),Object(i.b)("h3",{id:"snowflake-snowflake"},"Snowflake ",Object(i.b)("inlineCode",{parentName:"h3"},"snowflake")),Object(i.b)("p",null,"Extracts:"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},"List of databases, schema, and tables"),Object(i.b)("li",{parentName:"ul"},"Column types associated with each table")),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-yml"},"source:\n  type: snowflake\n  config:\n    username: user\n    password: pass\n    host_port: account_name\n    # table_pattern/schema_pattern is same as above\n    # options is same as above\n")),Object(i.b)("h3",{id:"oracle-oracle"},"Oracle ",Object(i.b)("inlineCode",{parentName:"h3"},"oracle")),Object(i.b)("p",null,"Extracts:"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},"List of databases, schema, and tables"),Object(i.b)("li",{parentName:"ul"},"Column types associated with each table")),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-yml"},"source:\n  type: oracle\n  config:\n    # For more details on authentication, see the documentation:\n    # https://docs.sqlalchemy.org/en/14/dialects/oracle.html#dialect-oracle-cx_oracle-connect and\n    # https://cx-oracle.readthedocs.io/en/latest/user_guide/connection_handling.html#connection-strings.\n    username: user\n    password: pass\n    host_port: localhost:5432\n    database: dbname\n    # table_pattern/schema_pattern is same as above\n    # options is same as above\n")),Object(i.b)("h3",{id:"google-bigquery-bigquery"},"Google BigQuery ",Object(i.b)("inlineCode",{parentName:"h3"},"bigquery")),Object(i.b)("p",null,"Extracts:"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},"List of databases, schema, and tables"),Object(i.b)("li",{parentName:"ul"},"Column types associated with each table")),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-yml"},'source:\n  type: bigquery\n  config:\n    project_id: project # optional - can autodetect from environment\n    dataset: dataset_name\n    options: # options is same as above\n      # See https://github.com/mxmzdlv/pybigquery#authentication for details.\n      credentials_path: "/path/to/keyfile.json" # optional\n    # table_pattern/schema_pattern is same as above\n')),Object(i.b)("h3",{id:"aws-athena-athena"},"AWS Athena ",Object(i.b)("inlineCode",{parentName:"h3"},"athena")),Object(i.b)("p",null,"Extracts:"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},"List of databases and tables"),Object(i.b)("li",{parentName:"ul"},"Column types associated with each table")),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-yml"},'source:\n  type: athena\n  config:\n    username: aws_access_key_id # Optional. If not specified, credentials are picked up according to boto3 rules.\n    # See https://boto3.amazonaws.com/v1/documentation/api/latest/guide/credentials.html\n    password: aws_secret_access_key # Optional.\n    database: database # Optional, defaults to "default"\n    aws_region: aws_region_name # i.e. "eu-west-1"\n    s3_staging_dir: s3_location # "s3://<bucket-name>/prefix/"\n    # The s3_staging_dir parameter is needed because Athena always writes query results to S3.\n    # See https://docs.aws.amazon.com/athena/latest/ug/querying.html\n    # However, the athena driver will transparently fetch these results as you would expect from any other sql client.\n    work_group: athena_workgroup # "primary"\n    # table_pattern/schema_pattern is same as above\n')),Object(i.b)("h3",{id:"aws-glue-glue"},"AWS Glue ",Object(i.b)("inlineCode",{parentName:"h3"},"glue")),Object(i.b)("p",null,"Extracts:"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},"List of tables"),Object(i.b)("li",{parentName:"ul"},"Column types associated with each table"),Object(i.b)("li",{parentName:"ul"},"Table metadata, such as owner, description and parameters")),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-yml"},'source:\n  type: glue\n  config:\n    aws_region: aws_region_name # i.e. "eu-west-1"\n    env: environment used for the DatasetSnapshot URN, one of "DEV", "EI", "PROD" or "CORP". # Optional, defaults to "PROD".\n    database_pattern: # Optional, to filter databases scanned, same as schema_pattern above.\n    table_pattern: # Optional, to filter tables scanned, same as table_pattern above.\n    aws_access_key_id # Optional. If not specified, credentials are picked up according to boto3 rules.\n    # See https://boto3.amazonaws.com/v1/documentation/api/latest/guide/credentials.html\n    aws_secret_access_key # Optional.\n    aws_session_token # Optional.\n')),Object(i.b)("h3",{id:"druid-druid"},"Druid ",Object(i.b)("inlineCode",{parentName:"h3"},"druid")),Object(i.b)("p",null,"Extracts:"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},"List of databases, schema, and tables"),Object(i.b)("li",{parentName:"ul"},"Column types associated with each table")),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"Note")," It is important to define a explicitly define deny schema pattern for internal druid databases (lookup & sys)\nif adding a schema pattern otherwise the crawler may crash before processing relevant databases.\nThis deny pattern is defined by default but is overriden by user-submitted configurations"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-yml"},'source:\n  type: druid\n  config:\n    # Point to broker address\n    host_port: localhost:8082\n    schema_pattern:\n      deny:\n        - "^(lookup|sys).*"\n    # options is same as above\n')),Object(i.b)("h3",{id:"other-databases-using-sqlalchemy-sqlalchemy"},"Other databases using SQLAlchemy ",Object(i.b)("inlineCode",{parentName:"h3"},"sqlalchemy")),Object(i.b)("p",null,"The ",Object(i.b)("inlineCode",{parentName:"p"},"sqlalchemy")," source is useful if we don't have a pre-built source for your chosen\ndatabase system, but there is an ",Object(i.b)("a",{parentName:"p",href:"https://docs.sqlalchemy.org/en/14/dialects/"},"SQLAlchemy dialect"),"\ndefined elsewhere. In order to use this, you must ",Object(i.b)("inlineCode",{parentName:"p"},"pip install")," the required dialect packages yourself."),Object(i.b)("p",null,"Extracts:"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},"List of schemas and tables"),Object(i.b)("li",{parentName:"ul"},"Column types associated with each table")),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-yml"},'source:\n  type: sqlalchemy\n  config:\n    # See https://docs.sqlalchemy.org/en/14/core/engines.html#database-urls\n    connect_uri: "dialect+driver://username:password@host:port/database"\n    options: {} # same as above\n    schema_pattern: {} # same as above\n    table_pattern: {} # same as above\n')),Object(i.b)("h3",{id:"mongodb-mongodb"},"MongoDB ",Object(i.b)("inlineCode",{parentName:"h3"},"mongodb")),Object(i.b)("p",null,"Extracts:"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},"List of databases"),Object(i.b)("li",{parentName:"ul"},"List of collections in each database")),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-yml"},'source:\n  type: "mongodb"\n  config:\n    # For advanced configurations, see the MongoDB docs.\n    # https://pymongo.readthedocs.io/en/stable/examples/authentication.html\n    connect_uri: "mongodb://localhost"\n    username: admin\n    password: password\n    authMechanism: "DEFAULT"\n    options: {}\n    database_pattern: {}\n    collection_pattern: {}\n    # database_pattern/collection_pattern are similar to schema_pattern/table_pattern from above\n')),Object(i.b)("h3",{id:"ldap-ldap"},"LDAP ",Object(i.b)("inlineCode",{parentName:"h3"},"ldap")),Object(i.b)("p",null,"Extracts:"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},"List of people"),Object(i.b)("li",{parentName:"ul"},"Names, emails, titles, and manager information for each person")),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-yml"},'source:\n  type: "ldap"\n  config:\n    ldap_server: ldap://localhost\n    ldap_user: "cn=admin,dc=example,dc=org"\n    ldap_password: "admin"\n    base_dn: "dc=example,dc=org"\n    filter: "(objectClass=*)" # optional field\n')),Object(i.b)("h3",{id:"file-file"},"File ",Object(i.b)("inlineCode",{parentName:"h3"},"file")),Object(i.b)("p",null,"Pulls metadata from a previously generated file. Note that the file sink\ncan produce such files, and a number of samples are included in the\n",Object(i.b)("a",{parentName:"p",href:"https://github.com/linkedin/datahub/blob/master/metadata-ingestion/examples/mce_files"},"examples/mce_files")," directory."),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-yml"},"source:\n  type: file\n  filename: ./path/to/mce/file.json\n")),Object(i.b)("h3",{id:"dbt-dbt"},"DBT ",Object(i.b)("inlineCode",{parentName:"h3"},"dbt")),Object(i.b)("p",null,"Pull metadata from DBT output files:"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},Object(i.b)("a",{parentName:"li",href:"https://docs.getdbt.com/reference/artifacts/manifest-json"},"dbt manifest file"),Object(i.b)("ul",{parentName:"li"},Object(i.b)("li",{parentName:"ul"},"This file contains model, source and lineage data."))),Object(i.b)("li",{parentName:"ul"},Object(i.b)("a",{parentName:"li",href:"https://docs.getdbt.com/reference/artifacts/catalog-json"},"dbt catalog file"),Object(i.b)("ul",{parentName:"li"},Object(i.b)("li",{parentName:"ul"},"This file contains schema data."),Object(i.b)("li",{parentName:"ul"},"DBT does not record schema data for Ephemeral models, as such datahub will show Ephemeral models in the lineage, however there will be no associated schema for Ephemeral models")))),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-yml"},'source:\n  type: "dbt"\n  config:\n    manifest_path: "./path/dbt/manifest_file.json"\n    catalog_path: "./path/dbt/catalog_file.json"\n')),Object(i.b)("h2",{id:"sinks"},"Sinks"),Object(i.b)("h3",{id:"datahub-rest-datahub-rest"},"DataHub Rest ",Object(i.b)("inlineCode",{parentName:"h3"},"datahub-rest")),Object(i.b)("p",null,"Pushes metadata to DataHub using the GMA rest API. The advantage of the rest-based interface\nis that any errors can immediately be reported."),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-yml"},'sink:\n  type: "datahub-rest"\n  config:\n    server: "http://localhost:8080"\n')),Object(i.b)("h3",{id:"datahub-kafka-datahub-kafka"},"DataHub Kafka ",Object(i.b)("inlineCode",{parentName:"h3"},"datahub-kafka")),Object(i.b)("p",null,"Pushes metadata to DataHub by publishing messages to Kafka. The advantage of the Kafka-based\ninterface is that it's asynchronous and can handle higher throughput. This requires the\nDatahub mce-consumer container to be running."),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-yml"},'sink:\n  type: "datahub-kafka"\n  config:\n    connection:\n      bootstrap: "localhost:9092"\n      producer_config: {} # passed to https://docs.confluent.io/platform/current/clients/confluent-kafka-python/index.html#serializingproducer\n')),Object(i.b)("h3",{id:"console-console"},"Console ",Object(i.b)("inlineCode",{parentName:"h3"},"console")),Object(i.b)("p",null,"Simply prints each metadata event to stdout. Useful for experimentation and debugging purposes."),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-yml"},'sink:\n  type: "console"\n')),Object(i.b)("h3",{id:"file-file-1"},"File ",Object(i.b)("inlineCode",{parentName:"h3"},"file")),Object(i.b)("p",null,"Outputs metadata to a file. This can be used to decouple metadata sourcing from the\nprocess of pushing it into DataHub, and is particularly useful for debugging purposes.\nNote that the file source can read files generated by this sink."),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-yml"},"sink:\n  type: file\n  config:\n    filename: ./path/to/mce/file.json\n")),Object(i.b)("h2",{id:"using-as-a-library"},"Using as a library"),Object(i.b)("p",null,"In some cases, you might want to construct the MetadataChangeEvents yourself but still use this framework to emit that metadata to DataHub. In this case, take a look at the emitter interfaces, which can easily be imported and called from your own code."),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},Object(i.b)("a",{parentName:"li",href:"https://github.com/linkedin/datahub/blob/master/metadata-ingestion/src/datahub/emitter/rest_emitter.py"},"DataHub emitter via REST")," (same requirements as ",Object(i.b)("inlineCode",{parentName:"li"},"datahub-rest"),"). Basic usage ",Object(i.b)("a",{parentName:"li",href:"https://github.com/linkedin/datahub/blob/master/metadata-ingestion/examples/library/lineage_emitter_rest.py"},"example"),"."),Object(i.b)("li",{parentName:"ul"},Object(i.b)("a",{parentName:"li",href:"https://github.com/linkedin/datahub/blob/master/metadata-ingestion/src/datahub/emitter/kafka_emitter.py"},"DataHub emitter via Kafka")," (same requirements as ",Object(i.b)("inlineCode",{parentName:"li"},"datahub-kafka"),"). Basic usage ",Object(i.b)("a",{parentName:"li",href:"https://github.com/linkedin/datahub/blob/master/metadata-ingestion/examples/library/lineage_emitter_kafka.py"},"example"),".")),Object(i.b)("h2",{id:"usage-with-airflow"},"Usage with Airflow"),Object(i.b)("p",null,"There's a couple ways to integrate DataHub with Airflow."),Object(i.b)("h3",{id:"running-ingestion-on-a-schedule"},"Running ingestion on a schedule"),Object(i.b)("p",null,"Take a look at these sample DAGs:"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},Object(i.b)("a",{parentName:"li",href:"https://github.com/linkedin/datahub/blob/master/metadata-ingestion/examples/airflow/generic_recipe_sample_dag.py"},Object(i.b)("inlineCode",{parentName:"a"},"generic_recipe_sample_dag.py"))," - a simple Airflow DAG that picks up a DataHub ingestion recipe configuration and runs it."),Object(i.b)("li",{parentName:"ul"},Object(i.b)("a",{parentName:"li",href:"https://github.com/linkedin/datahub/blob/master/metadata-ingestion/examples/airflow/mysql_sample_dag.py"},Object(i.b)("inlineCode",{parentName:"a"},"mysql_sample_dag.py"))," - an Airflow DAG that runs a MySQL metadata ingestion pipeline using an inlined configuration.")),Object(i.b)("h3",{id:"emitting-lineage-via-a-separate-operator"},"Emitting lineage via a separate operator"),Object(i.b)("p",null,"Take a look at this sample DAG:"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},Object(i.b)("a",{parentName:"li",href:"https://github.com/linkedin/datahub/blob/master/metadata-ingestion/examples/airflow/lineage_emission_dag.py"},Object(i.b)("inlineCode",{parentName:"a"},"lineage_emission_dag.py"))," - emits lineage using the DatahubEmitterOperator.")),Object(i.b)("p",null,"In order to use this example, you must first configure the Datahub hook. Like in ingestion, we support a Datahub REST hook and a Kafka-based hook."),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-sh"},"# For REST-based:\nairflow connections add  --conn-type 'datahub_rest' 'datahub_rest_default' --conn-host 'http://localhost:8080'\n# For Kafka-based (standard Kafka sink config can be passed via extras):\nairflow connections add  --conn-type 'datahub_kafka' 'datahub_kafka_default' --conn-host 'broker:9092' --conn-extra '{}'\n")),Object(i.b)("h3",{id:"using-datahubs-airflow-lineage-backend"},"Using Datahub's Airflow lineage backend"),Object(i.b)("ol",null,Object(i.b)("li",{parentName:"ol"},"First, you must configure the Airflow hooks. See above for details."),Object(i.b)("li",{parentName:"ol"},"Add the following lines to your ",Object(i.b)("inlineCode",{parentName:"li"},"airflow.cfg")," file. You might need to",Object(i.b)("pre",{parentName:"li"},Object(i.b)("code",{parentName:"pre",className:"language-ini"},"[lineage]\nbackend = datahub.integrations.airflow.DatahubAirflowLineageBackend\ndatahub_conn_id = datahub_rest_default  # or datahub_kafka_default - whatever you named the connection in step 1\n"))),Object(i.b)("li",{parentName:"ol"},"Configure ",Object(i.b)("inlineCode",{parentName:"li"},"inlets")," and ",Object(i.b)("inlineCode",{parentName:"li"},"outlets")," for your Airflow operators. For reference, look at the sample DAG in ",Object(i.b)("a",{parentName:"li",href:"https://github.com/linkedin/datahub/blob/master/metadata-ingestion/examples/airflow/lineage_backend_demo.py"},Object(i.b)("inlineCode",{parentName:"a"},"lineage_backend_demo.py")),"."),Object(i.b)("li",{parentName:"ol"},"[optional]"," Learn more about ",Object(i.b)("a",{parentName:"li",href:"https://airflow.apache.org/docs/apache-airflow/stable/lineage.html"},"Airflow lineage"),", including shorthand notation and some automation.")),Object(i.b)("h2",{id:"developing"},"Developing"),Object(i.b)("p",null,"See the ",Object(i.b)("a",{parentName:"p",href:"/docs/metadata-ingestion/developing"},"developing guide"),"."))}b.isMDXComponent=!0}}]);