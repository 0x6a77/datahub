(window.webpackJsonp=window.webpackJsonp||[]).push([[54],{125:function(e,t,a){"use strict";a.r(t),a.d(t,"frontMatter",(function(){return o})),a.d(t,"metadata",(function(){return c})),a.d(t,"rightToc",(function(){return s})),a.d(t,"default",(function(){return l}));var n=a(3),r=a(7),i=(a(0),a(165)),o={title:"How to onboard to GMA search?",hide_title:!0,slug:"/how/search-onboarding",custom_edit_url:"https://github.com/linkedin/datahub/blob/master/docs/how/search-onboarding.md"},c={unversionedId:"docs/how/search-onboarding",id:"docs/how/search-onboarding",isDocsHomePage:!1,title:"How to onboard to GMA search?",description:"How to onboard to GMA search?",source:"@site/genDocs/docs/how/search-onboarding.md",slug:"/how/search-onboarding",permalink:"/docs/how/search-onboarding",editUrl:"https://github.com/linkedin/datahub/blob/master/docs/how/search-onboarding.md",version:"current",sidebar:"overviewSidebar",previous:{title:"Onboarding to GMA Graph - Adding a new relationship type",permalink:"/docs/demo/graph-onboarding"},next:{title:"Onboarding to GMA Search - searching over a new field",permalink:"/docs/how/search-over-new-field"}},s=[{value:"1. Define search document model for the entity",id:"1-define-search-document-model-for-the-entity",children:[]},{value:"2. Create the search index, define its mappings and settings",id:"2-create-the-search-index-define-its-mappings-and-settings",children:[]},{value:"3. Ingestion into search index",id:"3-ingestion-into-search-index",children:[]},{value:"4. Search query configs",id:"4-search-query-configs",children:[]},{value:"5. Add search query endpoints to GMS",id:"5-add-search-query-endpoints-to-gms",children:[]}],d={rightToc:s};function l(e){var t=e.components,a=Object(r.a)(e,["components"]);return Object(i.b)("wrapper",Object(n.a)({},d,a,{components:t,mdxType:"MDXLayout"}),Object(i.b)("h1",{id:"how-to-onboard-to-gma-search"},"How to onboard to GMA search?"),Object(i.b)("blockquote",null,Object(i.b)("p",{parentName:"blockquote"},"Refer to ",Object(i.b)("a",{parentName:"p",href:"/docs/how/search-over-new-field"},"this doc")," if you're only interested in indexing a new field of an existing entity ")),Object(i.b)("h2",{id:"1-define-search-document-model-for-the-entity"},"1. Define search document model for the entity"),Object(i.b)("p",null,"Modeling is the most important and crucial part of your design.\n",Object(i.b)("a",{parentName:"p",href:"/docs/what/search-document"},"Search document")," model contains a list of fields that need to be indexed along with the names and their data types.\nCheck ",Object(i.b)("a",{parentName:"p",href:"/docs/what/search-document"},"here")," to learn more about search document model.\nPlease note that all fields in the search document model (except the ",Object(i.b)("inlineCode",{parentName:"p"},"urn"),") are ",Object(i.b)("inlineCode",{parentName:"p"},"optional"),".\nThis is because we want to support partial updates to search documents."),Object(i.b)("h2",{id:"2-create-the-search-index-define-its-mappings-and-settings"},"2. Create the search index, define its mappings and settings"),Object(i.b)("p",null,"A ",Object(i.b)("a",{parentName:"p",href:"https://www.elastic.co/guide/en/elasticsearch/reference/5.6/mapping.html"},"mapping")," is created using the information of search document model.\nIt defines how a document, and the fields it contains, are stored and indexed by various ","[tokenizers]",", ","[analyzers]"," and data type for the fields.\nFor certain fields, sub-fields are created using different analyzers.\nThe analyzers are chosen depending on the needs for each field.\nThis is currently created manually using ",Object(i.b)("a",{parentName:"p",href:"https://en.wikipedia.org/wiki/CURL"},"curl")," commands, and we plan to ",Object(i.b)("a",{parentName:"p",href:"/docs/what/search-index#search-automation-tbd"},"automate")," the process in the near future.\nCheck index ",Object(i.b)("a",{parentName:"p",href:"https://github.com/linkedin/datahub/blob/master/docker/elasticsearch/dataset-index-config.json"},"mappings & settings")," for ",Object(i.b)("inlineCode",{parentName:"p"},"dataset")," search index."),Object(i.b)("h2",{id:"3-ingestion-into-search-index"},"3. Ingestion into search index"),Object(i.b)("p",null,"The actual indexing process for each ",Object(i.b)("a",{parentName:"p",href:"/docs/what/entity"},"entity")," is powered by ","[index builders]",".\nThe builders register the metadata ","[aspects]"," of their interest against ",Object(i.b)("a",{parentName:"p",href:"/docs/architecture/metadata-ingestion#mae-consumer-job"},"MAE Consumer Job")," and will be invoked whenever an ",Object(i.b)("a",{parentName:"p",href:"/docs/what/mxe#metadata-audit-event-mae"},"MAE")," of same interest is received.\nIndex builders should be extended from ",Object(i.b)("a",{parentName:"p",href:"https://github.com/linkedin/datahub/blob/master/metadata-builders/src/main/java/com/linkedin/metadata/builders/search/BaseIndexBuilder.java"},"BaseIndexBuilder"),". Check ",Object(i.b)("a",{parentName:"p",href:"https://github.com/linkedin/datahub/blob/master/metadata-builders/src/main/java/com/linkedin/metadata/builders/search/DatasetIndexBuilder.java"},"DatasetIndexBuilder")," as an example.\nFor the consumer job to consume those MAEs, you should add your index builder to the ",Object(i.b)("a",{parentName:"p",href:"https://github.com/linkedin/datahub/blob/master/metadata-jobs/mae-consumer-job/src/main/java/com/linkedin/metadata/kafka/config/IndexBuildersConfig.java"},"index builder registry"),"."),Object(i.b)("h2",{id:"4-search-query-configs"},"4. Search query configs"),Object(i.b)("p",null,"Once you have the ",Object(i.b)("a",{parentName:"p",href:"/docs/what/search-index"},"search index")," built, it's ready to be queried!\nThe search query is constructed and executed through ",Object(i.b)("a",{parentName:"p",href:"/docs/architecture/metadata-serving#search-dao"},"Search DAO"),".\nThe raw search hits are retrieved and extracted using the base model.\nBesides the regular full text search, run time aggregation and relevance are provided in the search queries as well. "),Object(i.b)("p",null,Object(i.b)("a",{parentName:"p",href:"https://github.com/linkedin/datahub/blob/master/metadata-dao-impl/elasticsearch-dao/src/main/java/com/linkedin/metadata/dao/search/ESSearchDAO.java"},"ESSearchDAO")," is the implementation for the ",Object(i.b)("a",{parentName:"p",href:"https://github.com/linkedin/datahub/blob/master/metadata-dao/src/main/java/com/linkedin/metadata/dao/BaseSearchDAO.java"},"BaseSearchDAO")," for Elasticsearch.\nIt's still a generic class which can be used for a specific ",Object(i.b)("a",{parentName:"p",href:"/docs/what/entity"},"entity")," and configured using ",Object(i.b)("a",{parentName:"p",href:"https://github.com/linkedin/datahub/blob/master/metadata-dao-impl/elasticsearch-dao/src/main/java/com/linkedin/metadata/dao/search/BaseSearchConfig.java"},"BaseSearchConfig"),". "),Object(i.b)("p",null,"BaseSearchConfig is the abstraction for all query related configurations such as query templates, default field to execute autocomplete on etc."),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-java"},"public abstract class BaseSearchConfig<DOCUMENT extends RecordTemplate> {\n\n  public abstract Set<String> getFacetFields();\n\n  public String getIndexName() {\n    return getSearchDocument().getSimpleName().toLowerCase();\n  }\n\n  public abstract Class<DOCUMENT> getSearchDocument();\n\n  public abstract String getDefaultAutocompleteField();\n\n  public abstract String getSearchQueryTemplate();\n\n  public abstract String getAutocompleteQueryTemplate();\n}\n")),Object(i.b)("p",null,Object(i.b)("a",{parentName:"p",href:"https://github.com/linkedin/datahub/blob/master/gms/impl/src/main/java/com/linkedin/metadata/configs/DatasetSearchConfig.java"},"DatasetSearchConfig")," is the implementation of search config for ",Object(i.b)("inlineCode",{parentName:"p"},"dataset")," entity."),Object(i.b)("p",null,"Search query templates for various entities can be found ",Object(i.b)("a",{parentName:"p",href:"https://github.com/linkedin/datahub/tree/master/gms/impl/src/main/resources"},"here"),". "),Object(i.b)("h2",{id:"5-add-search-query-endpoints-to-gms"},"5. Add search query endpoints to GMS"),Object(i.b)("p",null,"Finally, you need to create ",Object(i.b)("a",{parentName:"p",href:"https://rest.li"},"rest.li")," APIs to serve your search queries.\n",Object(i.b)("a",{parentName:"p",href:"https://github.com/linkedin/datahub/blob/master/metadata-restli-resource/src/main/java/com/linkedin/metadata/restli/BaseSearchableEntityResource.java"},"BaseSearchableEntityResource")," provides an abstract implementation of search and autocomplete APIs.\nAny top level rest.li resource implementation could extend it and easily add search and autocomplete ",Object(i.b)("a",{parentName:"p",href:"https://linkedin.github.io/rest.li/user_guide/restli_server#action"},"ACTION")," methods.\nRefer to ",Object(i.b)("a",{parentName:"p",href:"https://github.com/linkedin/datahub/blob/master/gms/impl/src/main/java/com/linkedin/metadata/resources/identity/CorpUsers.java"},"CorpUsers")," rest.li resource implementation as an example."))}l.isMDXComponent=!0},165:function(e,t,a){"use strict";a.d(t,"a",(function(){return h})),a.d(t,"b",(function(){return m}));var n=a(0),r=a.n(n);function i(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function o(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function c(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?o(Object(a),!0).forEach((function(t){i(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):o(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function s(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},i=Object.keys(e);for(n=0;n<i.length;n++)a=i[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)a=i[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var d=r.a.createContext({}),l=function(e){var t=r.a.useContext(d),a=t;return e&&(a="function"==typeof e?e(t):c(c({},t),e)),a},h=function(e){var t=l(e.components);return r.a.createElement(d.Provider,{value:t},e.children)},b={inlineCode:"code",wrapper:function(e){var t=e.children;return r.a.createElement(r.a.Fragment,{},t)}},u=r.a.forwardRef((function(e,t){var a=e.components,n=e.mdxType,i=e.originalType,o=e.parentName,d=s(e,["components","mdxType","originalType","parentName"]),h=l(a),u=n,m=h["".concat(o,".").concat(u)]||h[u]||b[u]||i;return a?r.a.createElement(m,c(c({ref:t},d),{},{components:a})):r.a.createElement(m,c({ref:t},d))}));function m(e,t){var a=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var i=a.length,o=new Array(i);o[0]=u;var c={};for(var s in t)hasOwnProperty.call(t,s)&&(c[s]=t[s]);c.originalType=e,c.mdxType="string"==typeof e?e:n,o[1]=c;for(var d=2;d<i;d++)o[d]=a[d];return r.a.createElement.apply(null,o)}return r.a.createElement.apply(null,a)}u.displayName="MDXCreateElement"}}]);