(window.webpackJsonp=window.webpackJsonp||[]).push([[50],{119:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return o})),n.d(t,"metadata",(function(){return s})),n.d(t,"rightToc",(function(){return l})),n.d(t,"default",(function(){return c}));var i=n(163),a=n(164),r=(n(0),n(165)),o={title:"What is a relationship?",hide_title:!0,slug:"/what/relationship",custom_edit_url:"https://github.com/linkedin/datahub/blob/master/docs/what/relationship.md"},s={unversionedId:"docs/what/relationship",id:"docs/what/relationship",isDocsHomePage:!1,title:"What is a relationship?",description:"What is a relationship?",source:"@site/genDocs/docs/what/relationship.md",slug:"/what/relationship",permalink:"/docs/what/relationship",editUrl:"https://github.com/linkedin/datahub/blob/master/docs/what/relationship.md",version:"current",sidebar:"overviewSidebar",previous:{title:"What is URN?",permalink:"/docs/what/urn"},next:{title:"What is a search document?",permalink:"/docs/what/search-document"}},l=[{value:"Direction of Relationships",id:"direction-of-relationships",children:[]},{value:"High Cardinality Relationships",id:"high-cardinality-relationships",children:[]}],p={rightToc:l};function c(e){var t=e.components,o=Object(a.a)(e,["components"]);return Object(r.b)("wrapper",Object(i.a)({},p,o,{components:t,mdxType:"MDXLayout"}),Object(r.b)("h1",{id:"what-is-a-relationship"},"What is a relationship?"),Object(r.b)("p",null,"A relationship is a named associate between exactly two ",Object(r.b)("a",{parentName:"p",href:"/docs/what/entity"},"entities"),", a source and a destination. "),Object(r.b)("p",null,Object(r.b)("img",{alt:"metadata-modeling",src:n(177).default})),Object(r.b)("p",null,"From the above graph, a ",Object(r.b)("inlineCode",{parentName:"p"},"Group")," entity can be linked to a ",Object(r.b)("inlineCode",{parentName:"p"},"User")," entity via a ",Object(r.b)("inlineCode",{parentName:"p"},"HasMember")," relationship.\nNote that the name of the relationship reflects the direction, i.e. pointing from ",Object(r.b)("inlineCode",{parentName:"p"},"Group")," to ",Object(r.b)("inlineCode",{parentName:"p"},"User"),".\nThis is due to the fact that the actual metadata aspect holding this information is associated with ",Object(r.b)("inlineCode",{parentName:"p"},"Group"),", rather than User.\nHad the direction been reversed, the relationship would have been named ",Object(r.b)("inlineCode",{parentName:"p"},"IsMemberOf")," instead.\nSee ",Object(r.b)("a",{parentName:"p",href:"#direction-of-relationships"},"Direction of Relationships")," for more discussions on relationship directionality.\nA specific instance of a relationship, e.g. ",Object(r.b)("inlineCode",{parentName:"p"},"urn:li:corpgroup:group1")," has a member ",Object(r.b)("inlineCode",{parentName:"p"},"urn:li:corpuser:user1"),",\ncorresponds to an edge in the metadata graph."),Object(r.b)("p",null,"Similar to an entity, a relationship can also be associated with optional attributes that are derived from the metadata.\nFor example, from the ",Object(r.b)("inlineCode",{parentName:"p"},"Membership")," metadata aspect shown below, we\u2019re able to derive the ",Object(r.b)("inlineCode",{parentName:"p"},"HasMember")," relationship that links a specific ",Object(r.b)("inlineCode",{parentName:"p"},"Group")," to a specific ",Object(r.b)("inlineCode",{parentName:"p"},"User"),'. We can also include additional attribute to the relationship, e.g. importance, which corresponds to the position of the specific member in the original membership array. This allows complex graph query that travel only relationships that match certain criteria, e.g. "returns only the top-5 most important members of this group."\nSimilar to the entity attributes, relationship attributes should only be added based on the expected query patterns to reduce the indexing cost.'),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre"},"namespace: com.linkedin.group\n\nimport com.linkedin.common.AuditStamp\nimport com.linkedin.common.CorpuserUrn\n\n/**\n * The membership metadata for a group\n */\nrecord Membership {\n\n  /** Audit stamp for the last change */\n  modified: AuditStamp\n\n  /** Admin of the group */\n  admin: CorpuserUrn\n\n  /** Members of the group, ordered in descending importance */\n  members: array[CorpuserUrn]\n}\n")),Object(r.b)("p",null,'Relationships are meant to be "entity-neutral". In other words, one would expect to use the same ',Object(r.b)("inlineCode",{parentName:"p"},"OwnedBy")," relationship to link a ",Object(r.b)("inlineCode",{parentName:"p"},"Dataset")," to a ",Object(r.b)("inlineCode",{parentName:"p"},"User")," and to link a ",Object(r.b)("inlineCode",{parentName:"p"},"Dashboard")," to a ",Object(r.b)("inlineCode",{parentName:"p"},"User"),". As Pegasus doesn\u2019t allow typing a field using multiple URNs (because they\u2019re all essentially strings), we resort to using generic URN type for the source and destination.\nWe also introduce a ",Object(r.b)("inlineCode",{parentName:"p"},"@pairings")," ",Object(r.b)("a",{parentName:"p",href:"https://linkedin.github.io/rest.li/pdl_migration#shorthand-for-custom-properties"},"annotation")," to limit the allowed source and destination URN types."),Object(r.b)("p",null,"While it\u2019s possible to model relationships in rest.li as ",Object(r.b)("a",{parentName:"p",href:"https://linkedin.github.io/rest.li/modeling/modeling#association"},"association resources"),', which often get stored as mapping tables, it is far more common to model them as "foreign keys" field in a metadata aspect. For instance, the ',Object(r.b)("inlineCode",{parentName:"p"},"Ownership")," aspect is likely to contain an array of owner\u2019s corpuser URNs."),Object(r.b)("p",null,"Below is an example of how a relationship is modeled in PDL. Note that:"),Object(r.b)("ol",null,Object(r.b)("li",{parentName:"ol"},"As the ",Object(r.b)("inlineCode",{parentName:"li"},"source")," and ",Object(r.b)("inlineCode",{parentName:"li"},"destination")," are of generic URN type, we\u2019re able to factor them out to a common ",Object(r.b)("inlineCode",{parentName:"li"},"BaseRelationship")," model."),Object(r.b)("li",{parentName:"ol"},"Each model is expected to have a ",Object(r.b)("inlineCode",{parentName:"li"},"@pairings")," annotation that is an array of all allowed source-destination URN pairs."),Object(r.b)("li",{parentName:"ol"},"Unlike entity attributes, there\u2019s no requirement on making all relationship attributes optional since relationships do not support partial updates.")),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre"},"namespace com.linkedin.metadata.relationship\n\nimport com.linkedin.common.Urn\n\n/**\n * Common fields that apply to all relationships\n */\nrecord BaseRelationship {\n\n  /**\n   * Urn for the source of the relationship\n   */\n  source: Urn\n\n  /**\n   * Urn for the destination of the relationship\n   */\n  destination: Urn\n}\n")),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre"},'namespace com.linkedin.metadata.relationship\n\n/**\n * Data model for a has-member relationship\n */\n@pairings = [ {\n  "destination" : "com.linkedin.common.urn.CorpGroupUrn",\n  "source" : "com.linkedin.common.urn.CorpUserUrn"\n} ]\nrecord HasMembership includes BaseRelationship\n{\n  /**\n   * The importance of the membership\n   */\n  importance: int \n}\n')),Object(r.b)("h2",{id:"direction-of-relationships"},"Direction of Relationships"),Object(r.b)("p",null,'As relationships are modeled as directed edges between nodes, it\u2019s natural to ask which way should it be pointing,\nor should there be edges going both ways? The answer is, "doesn\u2019t really matter." It\u2019s rather an aesthetic choice than technical one. '),Object(r.b)("p",null,"For one, the actual direction doesn\u2019t really impact the execution of graph queries. Most graph DBs are fully capable of traversing edges in reverse direction efficiently."),Object(r.b)("p",null,'That being said, generally there\u2019s a more "natural way" to specify the direction of a relationship, which closely relate to how the metadata is stored. For example, the membership information for an LDAP group is generally stored as a list in group\u2019s metadata. As a result, it\u2019s more natural to model a ',Object(r.b)("inlineCode",{parentName:"p"},"HasMember")," relationship that points from a group to a member, instead of a ",Object(r.b)("inlineCode",{parentName:"p"},"IsMemberOf")," relationship pointing from member to group."),Object(r.b)("p",null,"Since all relationships are explicitly declared, it\u2019s fairly easy for a user to discover what relationships are available and their directionality by inspecting\nthe ",Object(r.b)("a",{parentName:"p",href:"https://github.com/linkedin/datahub/blob/master/metadata-models/src/main/pegasus/com/linkedin/metadata/relationship"},"relationships directory"),". It\u2019s also possible to provide a UI for the catalog of entities and relationships for analysts who are interested in building complex graph queries to gain insights into the metadata."),Object(r.b)("h2",{id:"high-cardinality-relationships"},"High Cardinality Relationships"),Object(r.b)("p",null,"See ",Object(r.b)("a",{parentName:"p",href:"/docs/advanced/high-cardinality"},"this doc")," for suggestions on how to best model relationships with high cardinality."))}c.isMDXComponent=!0},163:function(e,t,n){"use strict";function i(){return(i=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var i in n)Object.prototype.hasOwnProperty.call(n,i)&&(e[i]=n[i])}return e}).apply(this,arguments)}n.d(t,"a",(function(){return i}))},164:function(e,t,n){"use strict";function i(e,t){if(null==e)return{};var n,i,a={},r=Object.keys(e);for(i=0;i<r.length;i++)n=r[i],t.indexOf(n)>=0||(a[n]=e[n]);return a}n.d(t,"a",(function(){return i}))},165:function(e,t,n){"use strict";n.d(t,"a",(function(){return d})),n.d(t,"b",(function(){return b}));var i=n(0),a=n.n(i);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);t&&(i=i.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,i)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,i,a=function(e,t){if(null==e)return{};var n,i,a={},r=Object.keys(e);for(i=0;i<r.length;i++)n=r[i],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(i=0;i<r.length;i++)n=r[i],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var p=a.a.createContext({}),c=function(e){var t=a.a.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},d=function(e){var t=c(e.components);return a.a.createElement(p.Provider,{value:t},e.children)},h={inlineCode:"code",wrapper:function(e){var t=e.children;return a.a.createElement(a.a.Fragment,{},t)}},m=a.a.forwardRef((function(e,t){var n=e.components,i=e.mdxType,r=e.originalType,o=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),d=c(n),m=i,b=d["".concat(o,".").concat(m)]||d[m]||h[m]||r;return n?a.a.createElement(b,s(s({ref:t},p),{},{components:n})):a.a.createElement(b,s({ref:t},p))}));function b(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var r=n.length,o=new Array(r);o[0]=m;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:i,o[1]=s;for(var p=2;p<r;p++)o[p]=n[p];return a.a.createElement.apply(null,o)}return a.a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},177:function(e,t,n){"use strict";n.r(t),t.default=n.p+"assets/images/metadata-modeling-92c9ff3f89f50361a40b60173fe223c3.png"}}]);