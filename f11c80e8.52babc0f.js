(window.webpackJsonp=window.webpackJsonp||[]).push([[85],{154:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return o})),n.d(t,"metadata",(function(){return l})),n.d(t,"rightToc",(function(){return c})),n.d(t,"default",(function(){return s}));var a=n(163),r=n(164),i=(n(0),n(165)),o={title:"GraphQL Core",hide_title:!0,slug:"/datahub-graphql-core",custom_edit_url:"https://github.com/linkedin/datahub/blob/master/datahub-graphql-core/README.md"},l={unversionedId:"datahub-graphql-core/README",id:"datahub-graphql-core/README",isDocsHomePage:!1,title:"GraphQL Core",description:"Notice: datahub-graphql-core is currently in beta, and as such is currently subject to backwards incompatible changes.",source:"@site/genDocs/datahub-graphql-core/README.md",slug:"/datahub-graphql-core",permalink:"/docs/datahub-graphql-core",editUrl:"https://github.com/linkedin/datahub/blob/master/datahub-graphql-core/README.md",version:"current",sidebar:"overviewSidebar",previous:{title:"Frontend",permalink:"/docs/datahub-frontend"},next:{title:"Generalized Metadata Store (GMS)",permalink:"/docs/gms"}},c=[{value:"Extending the Graph",id:"extending-the-graph",children:[{value:"Near Term",id:"near-term",children:[]},{value:"Long Term",id:"long-term",children:[]}]}],b={rightToc:c};function s(e){var t=e.components,n=Object(r.a)(e,["components"]);return Object(i.b)("wrapper",Object(a.a)({},b,n,{components:t,mdxType:"MDXLayout"}),Object(i.b)("p",null,"Notice: ",Object(i.b)("inlineCode",{parentName:"p"},"datahub-graphql-core")," is currently in beta, and as such is currently subject to backwards incompatible changes. "),Object(i.b)("h1",{id:"datahub-graphql-core"},"DataHub GraphQL Core"),Object(i.b)("p",null,"DataHub GraphQL API is a shared lib module containing a GraphQL API on top of the GMS service layer. It exposes a graph-based representation\npermitting reads and writes against the entities and aspects on the Metadata Graph, including Datasets, CorpUsers, & more. "),Object(i.b)("p",null,"Contained within this module are "),Object(i.b)("ol",null,Object(i.b)("li",{parentName:"ol"},Object(i.b)("strong",{parentName:"li"},"GMS Schema"),": A GQL schema that based on GMS models, located under ",Object(i.b)("inlineCode",{parentName:"li"},"resources/gms.graphql"),". "),Object(i.b)("li",{parentName:"ol"},Object(i.b)("strong",{parentName:"li"},"GMS Data Fetchers"),": Components used by the GraphQL engine to resolve individual fields in the GQL schema."),Object(i.b)("li",{parentName:"ol"},Object(i.b)("strong",{parentName:"li"},"GMS Data Loaders"),": Components used by the GraphQL engine to fetch data from downstream sources efficiently (by batching). "),Object(i.b)("li",{parentName:"ol"},Object(i.b)("strong",{parentName:"li"},"GraphQLEngine"),": A wrapper on top of the default ",Object(i.b)("inlineCode",{parentName:"li"},"GraphQL")," object provided by ",Object(i.b)("inlineCode",{parentName:"li"},"graphql-java"),". Provides a way to configure all of the important stuff using a simple ",Object(i.b)("inlineCode",{parentName:"li"},"Builder API"),". "),Object(i.b)("li",{parentName:"ol"},Object(i.b)("strong",{parentName:"li"},"GMSGraphQLEngine"),": An engine capable of resolving the GMS schema using the data fetchers + loaders mentioned above (with no additional configuration required). ")),Object(i.b)("p",null,'We\'ve chosen to place these components in a library module so that GraphQL servers can be deployed in multiple "modes":'),Object(i.b)("ol",null,Object(i.b)("li",{parentName:"ol"},Object(i.b)("strong",{parentName:"li"},"Standalone"),": GraphQL facade, mainly used for programmatic access to the GMS graph from a non-Java environment"),Object(i.b)("li",{parentName:"ol"},Object(i.b)("strong",{parentName:"li"},"Embedded"),": Leverageable within another Java server to surface an extended GraphQL schema. For example, we use this to extend the GMS GraphQL schema in ",Object(i.b)("inlineCode",{parentName:"li"},"datahub-frontend")," ")),Object(i.b)("h2",{id:"extending-the-graph"},"Extending the Graph"),Object(i.b)("h3",{id:"near-term"},"Near Term"),Object(i.b)("p",null,"When extending the GMS graph, the following steps should be followed:"),Object(i.b)("ol",null,Object(i.b)("li",{parentName:"ol"},"Extend ",Object(i.b)("inlineCode",{parentName:"li"},"gms.graphql")," schema with new ",Object(i.b)("inlineCode",{parentName:"li"},"types")," (Queries) or ",Object(i.b)("inlineCode",{parentName:"li"},"inputs")," (Mutations). ")),Object(i.b)("p",null,"These should generally mirror the GMS models exactly, with notable exceptions:"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},"Maps: the GQL model must instead contain a list of { key, value } objects (e.g. Dataset.pdl 'properties' field)"),Object(i.b)("li",{parentName:"ul"},"Foreign-Keys: Foreign-key references embedded in GMS models should be resolved if the referenced entity exists in the GQL schema,\nreplacing the key with the actual entity model. (Example: replacing the 'owner' urn field in 'Ownership' with an actual ",Object(i.b)("inlineCode",{parentName:"li"},"CorpUser")," type)")),Object(i.b)("ol",{start:2},Object(i.b)("li",{parentName:"ol"},"Implement ",Object(i.b)("inlineCode",{parentName:"li"},"DataLoaders")," for any ",Object(i.b)("inlineCode",{parentName:"li"},"Query")," data ")),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},"DataLoaders should simply wrap GMS-provided clients to fetch data from GMS API.")),Object(i.b)("ol",{start:3},Object(i.b)("li",{parentName:"ol"},"Implement ",Object(i.b)("inlineCode",{parentName:"li"},"Mappers")," to transform Pegasus model returned by GMS to an auto-generated GQL POJO. (under ",Object(i.b)("inlineCode",{parentName:"li"},"/mainGeneratedGraphQL"),", generated on ",Object(i.b)("inlineCode",{parentName:"li"},"./gradlew datahub-graphql-core:build"),") ")),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},"If you've followed the guidance above, these mappers should be simple, mainly\nproviding identity mappings for fields that exist in both the GQL + Pegasus POJOs."),Object(i.b)("li",{parentName:"ul"},"In some cases, you'll need to perform small lambdas (unions, maps) to materialize the GQL object. ")),Object(i.b)("ol",{start:4},Object(i.b)("li",{parentName:"ol"},"Implement ",Object(i.b)("inlineCode",{parentName:"li"},"DataFetchers")," for any entity-type fields ")),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},"Each field which resolvers a full entity from a particular downstream GMS API should have it's owner resolver,\nwhich leverages any DataLoaders implemented in step 2 in the case of ",Object(i.b)("inlineCode",{parentName:"li"},"Queries"),"."),Object(i.b)("li",{parentName:"ul"},"Resolvers should always return an auto-generated GQL POJO (under ",Object(i.b)("inlineCode",{parentName:"li"},"/mainGeneratedGraphQL"),") to minimize the risk of runtime exceptions ")),Object(i.b)("ol",{start:5},Object(i.b)("li",{parentName:"ol"},"Implement ",Object(i.b)("inlineCode",{parentName:"li"},"DataFetcher")," unit tests")),Object(i.b)("h3",{id:"long-term"},"Long Term"),Object(i.b)("p",null,"Eventually, much of this is intended to be automatically generated from GMS models, including"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},"Generation of the primary entities on the GQL graph "),Object(i.b)("li",{parentName:"ul"},"Generation of Pegasus to GQL mapper logic"),Object(i.b)("li",{parentName:"ul"},"Generation of DataLoaders"),Object(i.b)("li",{parentName:"ul"},"Generatation of DataFetchers (Resolvers)")))}s.isMDXComponent=!0},163:function(e,t,n){"use strict";function a(){return(a=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var a in n)Object.prototype.hasOwnProperty.call(n,a)&&(e[a]=n[a])}return e}).apply(this,arguments)}n.d(t,"a",(function(){return a}))},164:function(e,t,n){"use strict";function a(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}n.d(t,"a",(function(){return a}))},165:function(e,t,n){"use strict";n.d(t,"a",(function(){return p})),n.d(t,"b",(function(){return m}));var a=n(0),r=n.n(a);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function c(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var b=r.a.createContext({}),s=function(e){var t=r.a.useContext(b),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},p=function(e){var t=s(e.components);return r.a.createElement(b.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.a.createElement(r.a.Fragment,{},t)}},u=r.a.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,o=e.parentName,b=c(e,["components","mdxType","originalType","parentName"]),p=s(n),u=a,m=p["".concat(o,".").concat(u)]||p[u]||d[u]||i;return n?r.a.createElement(m,l(l({ref:t},b),{},{components:n})):r.a.createElement(m,l({ref:t},b))}));function m(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,o=new Array(i);o[0]=u;var l={};for(var c in t)hasOwnProperty.call(t,c)&&(l[c]=t[c]);l.originalType=e,l.mdxType="string"==typeof e?e:a,o[1]=l;for(var b=2;b<i;b++)o[b]=n[b];return r.a.createElement.apply(null,o)}return r.a.createElement.apply(null,n)}u.displayName="MDXCreateElement"}}]);