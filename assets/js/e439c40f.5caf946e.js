(self.webpackChunkdocs_website=self.webpackChunkdocs_website||[]).push([[2686],{3905:function(e,t,n){"use strict";n.d(t,{Zo:function(){return p},kt:function(){return u}});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=a.createContext({}),d=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},p=function(e){var t=d(e.components);return a.createElement(s.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,s=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),m=d(n),u=r,h=m["".concat(s,".").concat(u)]||m[u]||c[u]||o;return n?a.createElement(h,i(i({ref:t},p),{},{components:n})):a.createElement(h,i({ref:t},p))}));function u(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,i=new Array(o);i[0]=m;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:r,i[1]=l;for(var d=2;d<o;d++)i[d]=n[d];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},934:function(e,t,n){"use strict";n.r(t),n.d(t,{frontMatter:function(){return i},metadata:function(){return l},toc:function(){return s},default:function(){return p}});var a=n(2122),r=n(9756),o=(n(7294),n(3905)),i={title:"Metadata Modeling",sidebar_label:"Metadata Modeling",slug:"/how/metadata-modelling",custom_edit_url:"https://github.com/linkedin/datahub/blob/master/docs/how/metadata-modelling.md"},l={unversionedId:"docs/how/metadata-modelling",id:"docs/how/metadata-modelling",isDocsHomePage:!1,title:"How to model metadata?",description:"GMA uses rest.li, which is LinkedIn's open source REST framework. All metadata in GMA needs to be modelled using Pegasus schema (PDL) which is the data schema for rest.li.",source:"@site/genDocs/docs/how/metadata-modelling.md",sourceDirName:"docs/how",slug:"/how/metadata-modelling",permalink:"/docs/how/metadata-modelling",editUrl:"https://github.com/linkedin/datahub/blob/master/docs/how/metadata-modelling.md",version:"current",sidebar_label:"Metadata Modeling",frontMatter:{title:"Metadata Modeling",sidebar_label:"Metadata Modeling",slug:"/how/metadata-modelling",custom_edit_url:"https://github.com/linkedin/datahub/blob/master/docs/how/metadata-modelling.md"},sidebar:"overviewSidebar",previous:{title:"How to onboard to GMA graph?",permalink:"/docs/how/graph-onboarding"},next:{title:"Onboarding to GMA Graph - Adding a new relationship type",permalink:"/docs/demo/graph-onboarding"}},s=[],d={toc:s};function p(e){var t=e.components,i=(0,r.Z)(e,["components"]);return(0,o.kt)("wrapper",(0,a.Z)({},d,i,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("p",null,(0,o.kt)("a",{parentName:"p",href:"/docs/what/gma"},"GMA")," uses ",(0,o.kt)("a",{parentName:"p",href:"https://rest.li"},"rest.li"),", which is LinkedIn's open source REST framework. All metadata in GMA needs to be modelled using ",(0,o.kt)("a",{parentName:"p",href:"https://linkedin.github.io/rest.li/pdl_schema"},"Pegasus schema (PDL)")," which is the data schema for ",(0,o.kt)("a",{parentName:"p",href:"https://rest.li"},"rest.li"),"."),(0,o.kt)("p",null,"Conceptually we\u2019re modelling metadata as a hybrid graph of nodes (",(0,o.kt)("a",{parentName:"p",href:"/docs/what/entity"},"entities"),") and edges (",(0,o.kt)("a",{parentName:"p",href:"/docs/what/relationship"},"relationships"),"), with additional documents (",(0,o.kt)("a",{parentName:"p",href:"/docs/what/aspect"},"metadata aspects"),") attached to each node. You can also think of it as a modified ",(0,o.kt)("a",{parentName:"p",href:"https://en.wikipedia.org/wiki/Entity%E2%80%93relationship_model"},"Entity-Relationship Model"),". "),(0,o.kt)("p",null,"Here is an example graph consisting of 3 types of entities (",(0,o.kt)("inlineCode",{parentName:"p"},"User"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"Group"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"Dataset"),"), 3 types of relationships (",(0,o.kt)("inlineCode",{parentName:"p"},"OwnedBy"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"HasAdmin"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"HasMember"),"), and 3 types of metadata aspects (",(0,o.kt)("inlineCode",{parentName:"p"},"Ownership"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"Profile"),", and ",(0,o.kt)("inlineCode",{parentName:"p"},"Membership"),")."),(0,o.kt)("p",null,(0,o.kt)("img",{alt:"metadata-modeling",src:n(3014).Z})))}p.isMDXComponent=!0},3014:function(e,t,n){"use strict";t.Z=n.p+"assets/images/metadata-modeling-92c9ff3f89f50361a40b60173fe223c3.png"}}]);