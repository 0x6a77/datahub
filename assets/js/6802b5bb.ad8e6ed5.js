"use strict";(self.webpackChunkdocs_website=self.webpackChunkdocs_website||[]).push([[926],{4137:function(n,e,t){t.d(e,{Zo:function(){return c},kt:function(){return p}});var a=t(7294);function s(n,e,t){return e in n?Object.defineProperty(n,e,{value:t,enumerable:!0,configurable:!0,writable:!0}):n[e]=t,n}function o(n,e){var t=Object.keys(n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(n);e&&(a=a.filter((function(e){return Object.getOwnPropertyDescriptor(n,e).enumerable}))),t.push.apply(t,a)}return t}function i(n){for(var e=1;e<arguments.length;e++){var t=null!=arguments[e]?arguments[e]:{};e%2?o(Object(t),!0).forEach((function(e){s(n,e,t[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(n,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(e){Object.defineProperty(n,e,Object.getOwnPropertyDescriptor(t,e))}))}return n}function r(n,e){if(null==n)return{};var t,a,s=function(n,e){if(null==n)return{};var t,a,s={},o=Object.keys(n);for(a=0;a<o.length;a++)t=o[a],e.indexOf(t)>=0||(s[t]=n[t]);return s}(n,e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(n);for(a=0;a<o.length;a++)t=o[a],e.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(n,t)&&(s[t]=n[t])}return s}var l=a.createContext({}),d=function(n){var e=a.useContext(l),t=e;return n&&(t="function"==typeof n?n(e):i(i({},e),n)),t},c=function(n){var e=d(n.components);return a.createElement(l.Provider,{value:e},n.children)},m={inlineCode:"code",wrapper:function(n){var e=n.children;return a.createElement(a.Fragment,{},e)}},u=a.forwardRef((function(n,e){var t=n.components,s=n.mdxType,o=n.originalType,l=n.parentName,c=r(n,["components","mdxType","originalType","parentName"]),u=d(t),p=s,f=u["".concat(l,".").concat(p)]||u[p]||m[p]||o;return t?a.createElement(f,i(i({ref:e},c),{},{components:t})):a.createElement(f,i({ref:e},c))}));function p(n,e){var t=arguments,s=e&&e.mdxType;if("string"==typeof n||s){var o=t.length,i=new Array(o);i[0]=u;var r={};for(var l in e)hasOwnProperty.call(e,l)&&(r[l]=e[l]);r.originalType=n,r.mdxType="string"==typeof n?n:s,i[1]=r;for(var d=2;d<o;d++)i[d]=t[d];return a.createElement.apply(null,i)}return a.createElement.apply(null,t)}u.displayName="MDXCreateElement"},5644:function(n,e,t){t.r(e),t.d(e,{frontMatter:function(){return r},contentTitle:function(){return l},metadata:function(){return d},toc:function(){return c},default:function(){return u}});var a=t(7462),s=t(3366),o=(t(7294),t(4137)),i=["components"],r={sidebar_position:13,title:"Assertion",sidebar_label:"Assertion",slug:"/generated/metamodel/entities/assertion",custom_edit_url:"https://github.com/linkedin/datahub/blob/master/docs/generated/metamodel/entities/assertion.md"},l="Assertion",d={unversionedId:"docs/generated/metamodel/entities/assertion",id:"docs/generated/metamodel/entities/assertion",isDocsHomePage:!1,title:"Assertion",description:"Assertion represents a data quality rule applied on one or more dataset.",source:"@site/genDocs/docs/generated/metamodel/entities/assertion.md",sourceDirName:"docs/generated/metamodel/entities",slug:"/generated/metamodel/entities/assertion",permalink:"/docs/generated/metamodel/entities/assertion",editUrl:"https://github.com/linkedin/datahub/blob/master/docs/generated/metamodel/entities/assertion.md",tags:[],version:"current",sidebarPosition:13,frontMatter:{sidebar_position:13,title:"Assertion",sidebar_label:"Assertion",slug:"/generated/metamodel/entities/assertion",custom_edit_url:"https://github.com/linkedin/datahub/blob/master/docs/generated/metamodel/entities/assertion.md"},sidebar:"overviewSidebar",previous:{title:"GlossaryNode",permalink:"/docs/generated/metamodel/entities/glossarynode"},next:{title:"DataProcess",permalink:"/docs/generated/metamodel/entities/dataprocess"}},c=[{value:"Aspects",id:"aspects",children:[{value:"assertionInfo",id:"assertioninfo",children:[],level:3},{value:"dataPlatformInstance",id:"dataplatforminstance",children:[],level:3}],level:2},{value:"Relationships",id:"relationships",children:[{value:"Outgoing",id:"outgoing",children:[],level:3}],level:2},{value:"Global Metadata Model",id:"global-metadata-model",children:[],level:2}],m={toc:c};function u(n){var e=n.components,t=(0,s.Z)(n,i);return(0,o.kt)("wrapper",(0,a.Z)({},m,t,{components:e,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"assertion"},"Assertion"),(0,o.kt)("p",null,"Assertion represents a data quality rule applied on one or more dataset."),(0,o.kt)("h2",{id:"aspects"},"Aspects"),(0,o.kt)("h3",{id:"assertioninfo"},"assertionInfo"),(0,o.kt)("p",null,"Information about an assertion"),(0,o.kt)("details",null,(0,o.kt)("summary",null,"Schema"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},'{\n  "type": "record",\n  "Aspect": {\n    "name": "assertionInfo"\n  },\n  "name": "AssertionInfo",\n  "namespace": "com.linkedin.assertion",\n  "fields": [\n    {\n      "Searchable": {\n        "/*": {\n          "queryByDefault": true\n        }\n      },\n      "type": {\n        "type": "map",\n        "values": "string"\n      },\n      "name": "customProperties",\n      "default": {},\n      "doc": "Custom property bag."\n    },\n    {\n      "java": {\n        "class": "com.linkedin.common.url.Url",\n        "coercerClass": "com.linkedin.common.url.UrlCoercer"\n      },\n      "type": [\n        "null",\n        "string"\n      ],\n      "name": "externalUrl",\n      "default": null,\n      "doc": "URL where the reference exist"\n    },\n    {\n      "type": {\n        "type": "enum",\n        "name": "AssertionType",\n        "namespace": "com.linkedin.assertion",\n        "symbols": [\n          "DATASET"\n        ]\n      },\n      "name": "type",\n      "doc": "Type of assertion. Assertion types can evolve to span Datasets, Flows (Pipelines), Models, Features etc."\n    },\n    {\n      "type": [\n        "null",\n        {\n          "type": "record",\n          "name": "DatasetAssertionInfo",\n          "namespace": "com.linkedin.assertion",\n          "fields": [\n            {\n              "type": [\n                "null",\n                {\n                  "type": "enum",\n                  "symbolDocs": {\n                    "DATASET_COLUMN": "This assertion applies to dataset columns",\n                    "DATASET_ROWS": "This assertion applies to entire rows of the dataset",\n                    "DATASET_SCHEMA": "This assertion applies to the schema of the dataset"\n                  },\n                  "name": "DatasetAssertionScope",\n                  "namespace": "com.linkedin.assertion",\n                  "symbols": [\n                    "DATASET_COLUMN",\n                    "DATASET_ROWS",\n                    "DATASET_SCHEMA"\n                  ]\n                }\n              ],\n              "name": "scope",\n              "default": null,\n              "doc": "Scope of the Assertion. What part of the dataset does this assertion apply to?\\nDeclared optional to make it convenient to inline into other aspects like AssertionInfo without requiring\\nadditional nesting. Semantically required, if this is a Dataset Assertion.\\n"\n            },\n            {\n              "type": [\n                "null",\n                {\n                  "type": "record",\n                  "name": "DatasetColumnAssertion",\n                  "namespace": "com.linkedin.assertion",\n                  "fields": [\n                    {\n                      "type": {\n                        "type": "enum",\n                        "symbolDocs": {\n                          "BETWEEN": "Value being asserted is between min_value and max_value",\n                          "CONTAIN": "Value being asserted contains value",\n                          "END_WITH": "Value being asserted ends with value",\n                          "EQUAL_TO": "Value being asserted is equal to value",\n                          "GREATER_THAN": "Value being asserted is greater than min_value",\n                          "GREATER_THAN_OR_EQUAL_TO": "Value being asserted is greater than or equal to min_value",\n                          "IN": "Value being asserted is one of the array values",\n                          "LESS_THAN": "Value being asserted is less than max_value",\n                          "LESS_THAN_OR_EQUAL_TO": "Value being asserted is less than or equal to max_value",\n                          "NOT_NULL": "Value being asserted is not null",\n                          "START_WITH": "Value being asserted starts with value",\n                          "_NATIVE_": "Other"\n                        },\n                        "name": "AssertionStdOperator",\n                        "namespace": "com.linkedin.assertion",\n                        "symbols": [\n                          "BETWEEN",\n                          "LESS_THAN",\n                          "LESS_THAN_OR_EQUAL_TO",\n                          "GREATER_THAN",\n                          "GREATER_THAN_OR_EQUAL_TO",\n                          "EQUAL_TO",\n                          "NOT_NULL",\n                          "CONTAIN",\n                          "END_WITH",\n                          "START_WITH",\n                          "IN",\n                          "_NATIVE_"\n                        ]\n                      },\n                      "name": "stdOperator",\n                      "doc": "Standardized assertion operator"\n                    },\n                    {\n                      "type": [\n                        "null",\n                        "string"\n                      ],\n                      "name": "nativeOperator",\n                      "default": null,\n                      "doc": "Native assertion operator"\n                    },\n                    {\n                      "type": {\n                        "type": "enum",\n                        "symbolDocs": {\n                          "IDENTITY": "Assertion is applied on individual column value",\n                          "MAX": "Assertion is applied on column std deviation",\n                          "MEAN": "Assertion is applied on column mean ",\n                          "MEDIAN": "Assertion is applied on column median",\n                          "MIN": "Assertion is applied on column min",\n                          "NULL_COUNT": "Assertion is applied on number of null values in column",\n                          "NULL_PROPORTION": "Assertion is applied on proportion of null values in column",\n                          "STDDEV": "Assertion is applied on column std deviation",\n                          "UNIQUE_COUNT": "Assertion is applied on number of distinct values in column",\n                          "UNIQUE_PROPOTION": "Assertion is applied on proportion of distinct values in column",\n                          "_NATIVE_": "Other"\n                        },\n                        "name": "DatasetColumnStdAggFunc",\n                        "namespace": "com.linkedin.assertion",\n                        "symbols": [\n                          "IDENTITY",\n                          "MEAN",\n                          "MEDIAN",\n                          "UNIQUE_COUNT",\n                          "UNIQUE_PROPOTION",\n                          "NULL_COUNT",\n                          "NULL_PROPORTION",\n                          "STDDEV",\n                          "MIN",\n                          "MAX",\n                          "_NATIVE_"\n                        ]\n                      },\n                      "name": "stdAggFunc",\n                      "doc": "Standardized aggrgation function applied on column values"\n                    },\n                    {\n                      "type": [\n                        "null",\n                        "string"\n                      ],\n                      "name": "nativeAggFunc",\n                      "default": null,\n                      "doc": "Native aggrgation function applied on column values"\n                    }\n                  ],\n                  "doc": "Assertion on column of a dataset"\n                }\n              ],\n              "name": "columnAssertion",\n              "default": null,\n              "doc": "Assertion details when scope is DATASET_COLUMN"\n            },\n            {\n              "type": [\n                "null",\n                {\n                  "type": "record",\n                  "name": "DatasetRowsAssertion",\n                  "namespace": "com.linkedin.assertion",\n                  "fields": [\n                    {\n                      "type": "com.linkedin.assertion.AssertionStdOperator",\n                      "name": "stdOperator",\n                      "doc": "Standardized assertion operator"\n                    },\n                    {\n                      "type": [\n                        "null",\n                        "string"\n                      ],\n                      "name": "nativeOperator",\n                      "default": null,\n                      "doc": "Native assertion operator"\n                    },\n                    {\n                      "type": {\n                        "type": "enum",\n                        "symbolDocs": {\n                          "ROW_COUNT": "Assertion is applied on number of rows",\n                          "_NATIVE_": "Other"\n                        },\n                        "name": "DatasetRowsStdAggFunc",\n                        "namespace": "com.linkedin.assertion",\n                        "symbols": [\n                          "ROW_COUNT",\n                          "_NATIVE_"\n                        ]\n                      },\n                      "name": "stdAggFunc",\n                      "doc": "Standardized aggrgation function applied on rows"\n                    },\n                    {\n                      "type": [\n                        "null",\n                        "string"\n                      ],\n                      "name": "nativeAggFunc",\n                      "default": null,\n                      "doc": "Native aggrgation function applied on rows"\n                    }\n                  ],\n                  "doc": "Assertion on rows of a dataset"\n                }\n              ],\n              "name": "rowsAssertion",\n              "default": null,\n              "doc": "Assertion details when scope is DATASET_ROWS"\n            },\n            {\n              "type": [\n                "null",\n                {\n                  "type": "record",\n                  "name": "DatasetSchemaAssertion",\n                  "namespace": "com.linkedin.assertion",\n                  "fields": [\n                    {\n                      "type": "com.linkedin.assertion.AssertionStdOperator",\n                      "name": "stdOperator",\n                      "doc": "Standardized assertion operator"\n                    },\n                    {\n                      "type": [\n                        "null",\n                        "string"\n                      ],\n                      "name": "nativeOperator",\n                      "default": null,\n                      "doc": "Native assertion operator"\n                    },\n                    {\n                      "type": {\n                        "type": "enum",\n                        "symbolDocs": {\n                          "COLUMNS": "Assertion is applied on all columns",\n                          "COLUMN_COUNT": "Assertion is applied on number of columns",\n                          "_NATIVE_": "Other"\n                        },\n                        "name": "DatasetSchemaStdAggFunc",\n                        "namespace": "com.linkedin.assertion",\n                        "symbols": [\n                          "COLUMNS",\n                          "COLUMN_COUNT",\n                          "_NATIVE_"\n                        ]\n                      },\n                      "name": "stdAggFunc",\n                      "doc": "Standardized aggrgation function applied on rows"\n                    },\n                    {\n                      "type": [\n                        "null",\n                        "string"\n                      ],\n                      "name": "nativeAggFunc",\n                      "default": null,\n                      "doc": "Native aggrgation function applied on rows"\n                    }\n                  ],\n                  "doc": "Assertion on schema of a dataset"\n                }\n              ],\n              "name": "schemaAssertion",\n              "default": null,\n              "doc": "Assertion details when scope is DATASET_SCHEMA"\n            },\n            {\n              "Relationship": {\n                "/*": {\n                  "entityTypes": [\n                    "schemaField"\n                  ],\n                  "name": "Asserts"\n                }\n              },\n              "type": [\n                "null",\n                {\n                  "type": "array",\n                  "items": "string"\n                }\n              ],\n              "name": "fields",\n              "default": null,\n              "doc": "One or more dataset schema fields that are targeted by this assertion"\n            },\n            {\n              "Relationship": {\n                "/*": {\n                  "entityTypes": [\n                    "dataset"\n                  ],\n                  "name": "Asserts"\n                }\n              },\n              "type": [\n                "null",\n                {\n                  "type": "array",\n                  "items": "string"\n                }\n              ],\n              "name": "datasets",\n              "default": null,\n              "doc": "One or more datasets that are targeted by this assertion"\n            }\n          ],\n          "doc": "Assertion attributes that are applicable to Dataset Assertions\\n"\n        }\n      ],\n      "name": "datasetAssertion",\n      "default": null,\n      "doc": "Dataset Assertion information when type is DATASET"\n    },\n    {\n      "type": [\n        "null",\n        "string"\n      ],\n      "name": "assertionLogic",\n      "default": null\n    },\n    {\n      "type": [\n        "null",\n        {\n          "type": "map",\n          "values": "string"\n        }\n      ],\n      "name": "parameters",\n      "default": null,\n      "doc": "Parameters required for the assertion. e.g. min_value, max_value, value, columns"\n    }\n  ],\n  "doc": "Information about an assertion"\n}\n'))),(0,o.kt)("h3",{id:"dataplatforminstance"},"dataPlatformInstance"),(0,o.kt)("p",null,"The specific instance of the data platform that this entity belongs to"),(0,o.kt)("details",null,(0,o.kt)("summary",null,"Schema"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},'{\n  "type": "record",\n  "Aspect": {\n    "name": "dataPlatformInstance"\n  },\n  "name": "DataPlatformInstance",\n  "namespace": "com.linkedin.common",\n  "fields": [\n    {\n      "Searchable": {\n        "addToFilters": true,\n        "fieldType": "URN",\n        "filterNameOverride": "Platform"\n      },\n      "java": {\n        "class": "com.linkedin.common.urn.Urn"\n      },\n      "type": "string",\n      "name": "platform",\n      "doc": "Data Platform"\n    },\n    {\n      "Searchable": {\n        "fieldName": "platformInstance",\n        "fieldType": "URN"\n      },\n      "java": {\n        "class": "com.linkedin.common.urn.Urn"\n      },\n      "type": [\n        "null",\n        "string"\n      ],\n      "name": "instance",\n      "default": null,\n      "doc": "Instance of the data platform (e.g. db instance)"\n    }\n  ],\n  "doc": "The specific instance of the data platform that this entity belongs to"\n}\n'))),(0,o.kt)("h2",{id:"relationships"},"Relationships"),(0,o.kt)("h3",{id:"outgoing"},"Outgoing"),(0,o.kt)("p",null,"These are the relationships stored in this entity's aspects"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"Asserts"),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},"SchemaField via ",(0,o.kt)("inlineCode",{parentName:"li"},"assertionInfo.datasetAssertion.fields")),(0,o.kt)("li",{parentName:"ul"},"Dataset via ",(0,o.kt)("inlineCode",{parentName:"li"},"assertionInfo.datasetAssertion.datasets"))))),(0,o.kt)("h2",{id:"global-metadata-model"},(0,o.kt)("a",{parentName:"h2",href:"https://github.com/linkedin/datahub/raw/master/docs/imgs/datahub-metadata-model.png"},"Global Metadata Model")),(0,o.kt)("p",null,(0,o.kt)("img",{parentName:"p",src:"https://github.com/linkedin/datahub/raw/master/docs/imgs/datahub-metadata-model.png",alt:"Global Graph"})))}u.isMDXComponent=!0}}]);