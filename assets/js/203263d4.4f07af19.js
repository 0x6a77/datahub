(self.webpackChunkdocs_website=self.webpackChunkdocs_website||[]).push([[7990],{4137:function(e,t,a){"use strict";a.d(t,{Zo:function(){return p},kt:function(){return m}});var n=a(7294);function l(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function s(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function r(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?s(Object(a),!0).forEach((function(t){l(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):s(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function i(e,t){if(null==e)return{};var a,n,l=function(e,t){if(null==e)return{};var a,n,l={},s=Object.keys(e);for(n=0;n<s.length;n++)a=s[n],t.indexOf(a)>=0||(l[a]=e[a]);return l}(e,t);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(n=0;n<s.length;n++)a=s[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(l[a]=e[a])}return l}var o=n.createContext({}),d=function(e){var t=n.useContext(o),a=t;return e&&(a="function"==typeof e?e(t):r(r({},t),e)),a},p=function(e){var t=d(e.components);return n.createElement(o.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},c=n.forwardRef((function(e,t){var a=e.components,l=e.mdxType,s=e.originalType,o=e.parentName,p=i(e,["components","mdxType","originalType","parentName"]),c=d(a),m=l,h=c["".concat(o,".").concat(m)]||c[m]||u[m]||s;return a?n.createElement(h,r(r({ref:t},p),{},{components:a})):n.createElement(h,r({ref:t},p))}));function m(e,t){var a=arguments,l=t&&t.mdxType;if("string"==typeof e||l){var s=a.length,r=new Array(s);r[0]=c;var i={};for(var o in t)hasOwnProperty.call(t,o)&&(i[o]=t[o]);i.originalType=e,i.mdxType="string"==typeof e?e:l,r[1]=i;for(var d=2;d<s;d++)r[d]=a[d];return n.createElement.apply(null,r)}return n.createElement.apply(null,a)}c.displayName="MDXCreateElement"},4887:function(e,t,a){"use strict";a.r(t),a.d(t,{frontMatter:function(){return i},contentTitle:function(){return o},metadata:function(){return d},toc:function(){return p},default:function(){return c}});var n=a(2122),l=a(9756),s=(a(7294),a(4137)),r=["components"],i={title:"DataHub Metadata Ingestion",sidebar_label:"Metadata Ingestion",slug:"/metadata-ingestion",custom_edit_url:"https://github.com/linkedin/datahub/blob/master/metadata-ingestion/README.md"},o="DataHub Metadata Ingestion",d={unversionedId:"metadata-ingestion/README",id:"metadata-ingestion/README",isDocsHomePage:!1,title:"DataHub Metadata Ingestion",description:"Python version 3.6+",source:"@site/genDocs/metadata-ingestion/README.md",sourceDirName:"metadata-ingestion",slug:"/metadata-ingestion",permalink:"/docs/metadata-ingestion",editUrl:"https://github.com/linkedin/datahub/blob/master/metadata-ingestion/README.md",version:"current",frontMatter:{title:"DataHub Metadata Ingestion",sidebar_label:"Metadata Ingestion",slug:"/metadata-ingestion",custom_edit_url:"https://github.com/linkedin/datahub/blob/master/metadata-ingestion/README.md"},sidebar:"overviewSidebar",previous:{title:"Debugging Guide",permalink:"/docs/debugging"},next:{title:"Architecture Overview",permalink:"/docs/architecture/architecture"}},p=[{value:"Getting Started",id:"getting-started",children:[{value:"Prerequisites",id:"prerequisites",children:[]},{value:"Install from PyPI",id:"install-from-pypi",children:[]},{value:"Install using Docker",id:"install-using-docker",children:[]},{value:"Install from source",id:"install-from-source",children:[]}]},{value:"Recipes",id:"recipes",children:[]},{value:"Sources",id:"sources",children:[{value:"Kafka Metadata <code>kafka</code>",id:"kafka-metadata-kafka",children:[]},{value:"MySQL Metadata <code>mysql</code>",id:"mysql-metadata-mysql",children:[]},{value:"Microsoft SQL Server Metadata <code>mssql</code>",id:"microsoft-sql-server-metadata-mssql",children:[]},{value:"Hive <code>hive</code>",id:"hive-hive",children:[]},{value:"PostgreSQL <code>postgres</code>",id:"postgresql-postgres",children:[]},{value:"Redshift <code>redshift</code>",id:"redshift-redshift",children:[]},{value:"AWS SageMaker <code>sagemaker</code>",id:"aws-sagemaker-sagemaker",children:[]},{value:"Snowflake <code>snowflake</code>",id:"snowflake-snowflake",children:[]},{value:"Superset <code>superset</code>",id:"superset-superset",children:[]},{value:"Oracle <code>oracle</code>",id:"oracle-oracle",children:[]},{value:"Feast <code>feast</code>",id:"feast-feast",children:[]},{value:"Google BigQuery <code>bigquery</code>",id:"google-bigquery-bigquery",children:[]},{value:"AWS Athena <code>athena</code>",id:"aws-athena-athena",children:[]},{value:"AWS Glue <code>glue</code>",id:"aws-glue-glue",children:[]},{value:"Druid <code>druid</code>",id:"druid-druid",children:[]},{value:"Other databases using SQLAlchemy <code>sqlalchemy</code>",id:"other-databases-using-sqlalchemy-sqlalchemy",children:[]},{value:"MongoDB <code>mongodb</code>",id:"mongodb-mongodb",children:[]},{value:"LDAP <code>ldap</code>",id:"ldap-ldap",children:[]},{value:"LookML <code>lookml</code>",id:"lookml-lookml",children:[]},{value:"Looker dashboards <code>looker</code>",id:"looker-dashboards-looker",children:[]},{value:"File <code>file</code>",id:"file-file",children:[]},{value:"dbt <code>dbt</code>",id:"dbt-dbt",children:[]},{value:"Google BigQuery Usage Stats <code>bigquery-usage</code>",id:"google-bigquery-usage-stats-bigquery-usage",children:[]},{value:"Snowflake Usage Stats <code>snowflake-usage</code>",id:"snowflake-usage-stats-snowflake-usage",children:[]},{value:"Kafka Connect <code>kafka-connect</code>",id:"kafka-connect-kafka-connect",children:[]}]},{value:"Sinks",id:"sinks",children:[{value:"DataHub Rest <code>datahub-rest</code>",id:"datahub-rest-datahub-rest",children:[]},{value:"DataHub Kafka <code>datahub-kafka</code>",id:"datahub-kafka-datahub-kafka",children:[]},{value:"Console <code>console</code>",id:"console-console",children:[]},{value:"File <code>file</code>",id:"file-file-1",children:[]}]},{value:"Transformations",id:"transformations",children:[]},{value:"Using as a library",id:"using-as-a-library",children:[]},{value:"Lineage with Airflow",id:"lineage-with-airflow",children:[{value:"Using Datahub&#39;s Airflow lineage backend (recommended)",id:"using-datahubs-airflow-lineage-backend-recommended",children:[]},{value:"Emitting lineage via a separate operator",id:"emitting-lineage-via-a-separate-operator",children:[]}]},{value:"Developing",id:"developing",children:[]}],u={toc:p};function c(e){var t=e.components,a=(0,l.Z)(e,r);return(0,s.kt)("wrapper",(0,n.Z)({},u,a,{components:t,mdxType:"MDXLayout"}),(0,s.kt)("h1",{id:"datahub-metadata-ingestion"},"DataHub Metadata Ingestion"),(0,s.kt)("p",null,(0,s.kt)("img",{parentName:"p",src:"https://img.shields.io/badge/python-3.6%2B-blue",alt:"Python version 3.6+"})),(0,s.kt)("p",null,"This module hosts an extensible Python-based metadata ingestion system for DataHub.\nThis supports sending data to DataHub using Kafka or through the REST API.\nIt can be used through our CLI tool, with an orchestrator like Airflow, or as a library."),(0,s.kt)("h2",{id:"getting-started"},"Getting Started"),(0,s.kt)("h3",{id:"prerequisites"},"Prerequisites"),(0,s.kt)("p",null,"Before running any metadata ingestion job, you should make sure that DataHub backend services are all running. If you are trying this out locally, the easiest way to do that is through ",(0,s.kt)("a",{parentName:"p",href:"https://github.com/linkedin/datahub/blob/master/docker"},"quickstart Docker images"),"."),(0,s.kt)("h3",{id:"install-from-pypi"},"Install from PyPI"),(0,s.kt)("p",null,"The folks over at ",(0,s.kt)("a",{parentName:"p",href:"https://www.acryl.io/"},"Acryl Data")," maintain a PyPI package for DataHub metadata ingestion."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-shell"},'# Requires Python 3.6+\npython3 -m pip install --upgrade pip wheel setuptools\npython3 -m pip install --upgrade acryl-datahub\ndatahub version\n# If you see "command not found", try running this instead: python3 -m datahub version\n')),(0,s.kt)("p",null,"If you run into an error, try checking the ",(0,s.kt)("a",{parentName:"p",href:"/docs/metadata-ingestion/developing#Common-setup-issues"},(0,s.kt)("em",{parentName:"a"},"common setup issues")),"."),(0,s.kt)("h4",{id:"installing-plugins"},"Installing Plugins"),(0,s.kt)("p",null,"We use a plugin architecture so that you can install only the dependencies you actually need."),(0,s.kt)("table",null,(0,s.kt)("thead",{parentName:"table"},(0,s.kt)("tr",{parentName:"thead"},(0,s.kt)("th",{parentName:"tr",align:null},"Plugin Name"),(0,s.kt)("th",{parentName:"tr",align:null},"Install Command"),(0,s.kt)("th",{parentName:"tr",align:null},"Provides"))),(0,s.kt)("tbody",{parentName:"table"},(0,s.kt)("tr",{parentName:"tbody"},(0,s.kt)("td",{parentName:"tr",align:null},"file"),(0,s.kt)("td",{parentName:"tr",align:null},(0,s.kt)("em",{parentName:"td"},"included by default")),(0,s.kt)("td",{parentName:"tr",align:null},"File source and sink")),(0,s.kt)("tr",{parentName:"tbody"},(0,s.kt)("td",{parentName:"tr",align:null},"console"),(0,s.kt)("td",{parentName:"tr",align:null},(0,s.kt)("em",{parentName:"td"},"included by default")),(0,s.kt)("td",{parentName:"tr",align:null},"Console sink")),(0,s.kt)("tr",{parentName:"tbody"},(0,s.kt)("td",{parentName:"tr",align:null},"athena"),(0,s.kt)("td",{parentName:"tr",align:null},(0,s.kt)("inlineCode",{parentName:"td"},"pip install 'acryl-datahub[athena]'")),(0,s.kt)("td",{parentName:"tr",align:null},"AWS Athena source")),(0,s.kt)("tr",{parentName:"tbody"},(0,s.kt)("td",{parentName:"tr",align:null},"bigquery"),(0,s.kt)("td",{parentName:"tr",align:null},(0,s.kt)("inlineCode",{parentName:"td"},"pip install 'acryl-datahub[bigquery]'")),(0,s.kt)("td",{parentName:"tr",align:null},"BigQuery source")),(0,s.kt)("tr",{parentName:"tbody"},(0,s.kt)("td",{parentName:"tr",align:null},"bigquery-usage"),(0,s.kt)("td",{parentName:"tr",align:null},(0,s.kt)("inlineCode",{parentName:"td"},"pip install 'acryl-datahub[bigquery-usage]'")),(0,s.kt)("td",{parentName:"tr",align:null},"BigQuery usage statistics source")),(0,s.kt)("tr",{parentName:"tbody"},(0,s.kt)("td",{parentName:"tr",align:null},"feast"),(0,s.kt)("td",{parentName:"tr",align:null},(0,s.kt)("inlineCode",{parentName:"td"},"pip install 'acryl-datahub[feast]'")),(0,s.kt)("td",{parentName:"tr",align:null},"Feast source")),(0,s.kt)("tr",{parentName:"tbody"},(0,s.kt)("td",{parentName:"tr",align:null},"glue"),(0,s.kt)("td",{parentName:"tr",align:null},(0,s.kt)("inlineCode",{parentName:"td"},"pip install 'acryl-datahub[glue]'")),(0,s.kt)("td",{parentName:"tr",align:null},"AWS Glue source")),(0,s.kt)("tr",{parentName:"tbody"},(0,s.kt)("td",{parentName:"tr",align:null},"hive"),(0,s.kt)("td",{parentName:"tr",align:null},(0,s.kt)("inlineCode",{parentName:"td"},"pip install 'acryl-datahub[hive]'")),(0,s.kt)("td",{parentName:"tr",align:null},"Hive source")),(0,s.kt)("tr",{parentName:"tbody"},(0,s.kt)("td",{parentName:"tr",align:null},"mssql"),(0,s.kt)("td",{parentName:"tr",align:null},(0,s.kt)("inlineCode",{parentName:"td"},"pip install 'acryl-datahub[mssql]'")),(0,s.kt)("td",{parentName:"tr",align:null},"SQL Server source")),(0,s.kt)("tr",{parentName:"tbody"},(0,s.kt)("td",{parentName:"tr",align:null},"mysql"),(0,s.kt)("td",{parentName:"tr",align:null},(0,s.kt)("inlineCode",{parentName:"td"},"pip install 'acryl-datahub[mysql]'")),(0,s.kt)("td",{parentName:"tr",align:null},"MySQL source")),(0,s.kt)("tr",{parentName:"tbody"},(0,s.kt)("td",{parentName:"tr",align:null},"oracle"),(0,s.kt)("td",{parentName:"tr",align:null},(0,s.kt)("inlineCode",{parentName:"td"},"pip install 'acryl-datahub[oracle]'")),(0,s.kt)("td",{parentName:"tr",align:null},"Oracle source")),(0,s.kt)("tr",{parentName:"tbody"},(0,s.kt)("td",{parentName:"tr",align:null},"postgres"),(0,s.kt)("td",{parentName:"tr",align:null},(0,s.kt)("inlineCode",{parentName:"td"},"pip install 'acryl-datahub[postgres]'")),(0,s.kt)("td",{parentName:"tr",align:null},"Postgres source")),(0,s.kt)("tr",{parentName:"tbody"},(0,s.kt)("td",{parentName:"tr",align:null},"redshift"),(0,s.kt)("td",{parentName:"tr",align:null},(0,s.kt)("inlineCode",{parentName:"td"},"pip install 'acryl-datahub[redshift]'")),(0,s.kt)("td",{parentName:"tr",align:null},"Redshift source")),(0,s.kt)("tr",{parentName:"tbody"},(0,s.kt)("td",{parentName:"tr",align:null},"sagemaker"),(0,s.kt)("td",{parentName:"tr",align:null},(0,s.kt)("inlineCode",{parentName:"td"},"pip install 'acryl-datahub[sagemaker]'")),(0,s.kt)("td",{parentName:"tr",align:null},"AWS SageMaker source")),(0,s.kt)("tr",{parentName:"tbody"},(0,s.kt)("td",{parentName:"tr",align:null},"sqlalchemy"),(0,s.kt)("td",{parentName:"tr",align:null},(0,s.kt)("inlineCode",{parentName:"td"},"pip install 'acryl-datahub[sqlalchemy]'")),(0,s.kt)("td",{parentName:"tr",align:null},"Generic SQLAlchemy source")),(0,s.kt)("tr",{parentName:"tbody"},(0,s.kt)("td",{parentName:"tr",align:null},"snowflake"),(0,s.kt)("td",{parentName:"tr",align:null},(0,s.kt)("inlineCode",{parentName:"td"},"pip install 'acryl-datahub[snowflake]'")),(0,s.kt)("td",{parentName:"tr",align:null},"Snowflake source")),(0,s.kt)("tr",{parentName:"tbody"},(0,s.kt)("td",{parentName:"tr",align:null},"snowflake-usage"),(0,s.kt)("td",{parentName:"tr",align:null},(0,s.kt)("inlineCode",{parentName:"td"},"pip install 'acryl-datahub[snowflake-usage]'")),(0,s.kt)("td",{parentName:"tr",align:null},"Snowflake usage statistics source")),(0,s.kt)("tr",{parentName:"tbody"},(0,s.kt)("td",{parentName:"tr",align:null},"superset"),(0,s.kt)("td",{parentName:"tr",align:null},(0,s.kt)("inlineCode",{parentName:"td"},"pip install 'acryl-datahub[superset]'")),(0,s.kt)("td",{parentName:"tr",align:null},"Superset source")),(0,s.kt)("tr",{parentName:"tbody"},(0,s.kt)("td",{parentName:"tr",align:null},"mongodb"),(0,s.kt)("td",{parentName:"tr",align:null},(0,s.kt)("inlineCode",{parentName:"td"},"pip install 'acryl-datahub[mongodb]'")),(0,s.kt)("td",{parentName:"tr",align:null},"MongoDB source")),(0,s.kt)("tr",{parentName:"tbody"},(0,s.kt)("td",{parentName:"tr",align:null},"ldap"),(0,s.kt)("td",{parentName:"tr",align:null},(0,s.kt)("inlineCode",{parentName:"td"},"pip install 'acryl-datahub[ldap]'")," (",(0,s.kt)("a",{parentName:"td",href:"https://www.python-ldap.org/en/python-ldap-3.3.0/installing.html#build-prerequisites"},"extra requirements"),")"),(0,s.kt)("td",{parentName:"tr",align:null},"LDAP source")),(0,s.kt)("tr",{parentName:"tbody"},(0,s.kt)("td",{parentName:"tr",align:null},"looker"),(0,s.kt)("td",{parentName:"tr",align:null},(0,s.kt)("inlineCode",{parentName:"td"},"pip install 'acryl-datahub[looker]'")),(0,s.kt)("td",{parentName:"tr",align:null},"Looker source")),(0,s.kt)("tr",{parentName:"tbody"},(0,s.kt)("td",{parentName:"tr",align:null},"lookml"),(0,s.kt)("td",{parentName:"tr",align:null},(0,s.kt)("inlineCode",{parentName:"td"},"pip install 'acryl-datahub[lookml]'")),(0,s.kt)("td",{parentName:"tr",align:null},"LookML source, requires Python 3.7+")),(0,s.kt)("tr",{parentName:"tbody"},(0,s.kt)("td",{parentName:"tr",align:null},"kafka"),(0,s.kt)("td",{parentName:"tr",align:null},(0,s.kt)("inlineCode",{parentName:"td"},"pip install 'acryl-datahub[kafka]'")),(0,s.kt)("td",{parentName:"tr",align:null},"Kafka source")),(0,s.kt)("tr",{parentName:"tbody"},(0,s.kt)("td",{parentName:"tr",align:null},"druid"),(0,s.kt)("td",{parentName:"tr",align:null},(0,s.kt)("inlineCode",{parentName:"td"},"pip install 'acryl-datahub[druid]'")),(0,s.kt)("td",{parentName:"tr",align:null},"Druid Source")),(0,s.kt)("tr",{parentName:"tbody"},(0,s.kt)("td",{parentName:"tr",align:null},"dbt"),(0,s.kt)("td",{parentName:"tr",align:null},(0,s.kt)("em",{parentName:"td"},"no additional dependencies")),(0,s.kt)("td",{parentName:"tr",align:null},"dbt source")),(0,s.kt)("tr",{parentName:"tbody"},(0,s.kt)("td",{parentName:"tr",align:null},"datahub-rest"),(0,s.kt)("td",{parentName:"tr",align:null},(0,s.kt)("inlineCode",{parentName:"td"},"pip install 'acryl-datahub[datahub-rest]'")),(0,s.kt)("td",{parentName:"tr",align:null},"DataHub sink over REST API")),(0,s.kt)("tr",{parentName:"tbody"},(0,s.kt)("td",{parentName:"tr",align:null},"datahub-kafka"),(0,s.kt)("td",{parentName:"tr",align:null},(0,s.kt)("inlineCode",{parentName:"td"},"pip install 'acryl-datahub[datahub-kafka]'")),(0,s.kt)("td",{parentName:"tr",align:null},"DataHub sink over Kafka")))),(0,s.kt)("p",null,"These plugins can be mixed and matched as desired. For example:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-shell"},"pip install 'acryl-datahub[bigquery,datahub-rest]'\n")),(0,s.kt)("p",null,"You can check the active plugins:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-shell"},"datahub check plugins\n")),(0,s.kt)("h4",{id:"basic-usage"},"Basic Usage"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-shell"},"pip install 'acryl-datahub[datahub-rest]'  # install the required plugin\ndatahub ingest -c ./examples/recipes/example_to_datahub_rest.yml\n")),(0,s.kt)("h3",{id:"install-using-docker"},"Install using Docker"),(0,s.kt)("p",null,(0,s.kt)("a",{parentName:"p",href:"https://hub.docker.com/r/linkedin/datahub-ingestion"},(0,s.kt)("img",{parentName:"a",src:"https://img.shields.io/docker/pulls/linkedin/datahub-ingestion?style=plastic",alt:"Docker Hub"})),"\n",(0,s.kt)("a",{parentName:"p",href:"https://github.com/linkedin/datahub/actions/workflows/docker-ingestion.yml"},(0,s.kt)("img",{parentName:"a",src:"https://github.com/linkedin/datahub/actions/workflows/docker-ingestion.yml/badge.svg",alt:"datahub-ingestion docker"}))),(0,s.kt)("p",null,"If you don't want to install locally, you can alternatively run metadata ingestion within a Docker container.\nWe have prebuilt images available on ",(0,s.kt)("a",{parentName:"p",href:"https://hub.docker.com/r/linkedin/datahub-ingestion"},"Docker hub"),". All plugins will be installed and enabled automatically."),(0,s.kt)("p",null,(0,s.kt)("em",{parentName:"p"},"Limitation: the datahub_docker.sh convenience script assumes that the recipe and any input/output files are accessible in the current working directory or its subdirectories. Files outside the current working directory will not be found, and you'll need to invoke the Docker image directly.")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-shell"},"# Assumes the DataHub repo is cloned locally.\n./metadata-ingestion/scripts/datahub_docker.sh ingest -c ./examples/recipes/example_to_datahub_rest.yml\n")),(0,s.kt)("h3",{id:"install-from-source"},"Install from source"),(0,s.kt)("p",null,"If you'd like to install from source, see the ",(0,s.kt)("a",{parentName:"p",href:"/docs/metadata-ingestion/developing"},"developer guide"),"."),(0,s.kt)("h2",{id:"recipes"},"Recipes"),(0,s.kt)("p",null,"A recipe is a configuration file that tells our ingestion scripts where to pull data from (source) and where to put it (sink).\nHere's a simple example that pulls metadata from MSSQL and puts it into datahub."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-yaml"},'# A sample recipe that pulls metadata from MSSQL and puts it into DataHub\n# using the Rest API.\nsource:\n  type: mssql\n  config:\n    username: sa\n    password: ${MSSQL_PASSWORD}\n    database: DemoData\n\ntransformers:\n  - type: "fully-qualified-class-name-of-transformer"\n    config:\n      some_property: "some.value"\n\nsink:\n  type: "datahub-rest"\n  config:\n    server: "http://localhost:8080"\n')),(0,s.kt)("p",null,"We automatically expand environment variables in the config,\nsimilar to variable substitution in GNU bash or in docker-compose files. For details, see\n",(0,s.kt)("a",{parentName:"p",href:"https://docs.docker.com/compose/compose-file/compose-file-v2/#variable-substitution"},"https://docs.docker.com/compose/compose-file/compose-file-v2/#variable-substitution"),"."),(0,s.kt)("p",null,"Running a recipe is quite easy."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-shell"},"datahub ingest -c ./examples/recipes/mssql_to_datahub.yml\n")),(0,s.kt)("p",null,"A number of recipes are included in the examples/recipes directory."),(0,s.kt)("h2",{id:"sources"},"Sources"),(0,s.kt)("h3",{id:"kafka-metadata-kafka"},"Kafka Metadata ",(0,s.kt)("inlineCode",{parentName:"h3"},"kafka")),(0,s.kt)("p",null,"Extracts:"),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},"List of topics - from the Kafka broker"),(0,s.kt)("li",{parentName:"ul"},"Schemas associated with each topic - from the schema registry")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-yml"},'source:\n  type: "kafka"\n  config:\n    connection:\n      bootstrap: "broker:9092"\n      consumer_config: {} # passed to https://docs.confluent.io/platform/current/clients/confluent-kafka-python/html/index.html#confluent_kafka.DeserializingConsumer\n      schema_registry_url: http://localhost:8081\n      schema_registry_config: {} # passed to https://docs.confluent.io/platform/current/clients/confluent-kafka-python/html/index.html#confluent_kafka.schema_registry.SchemaRegistryClient\n')),(0,s.kt)("p",null,"The options in the consumer config and schema registry config are passed to the Kafka DeserializingConsumer and SchemaRegistryClient respectively."),(0,s.kt)("p",null,"For a full example with a number of security options, see this ",(0,s.kt)("a",{parentName:"p",href:"https://github.com/linkedin/datahub/blob/master/metadata-ingestion/examples/recipes/secured_kafka.yml"},"example recipe"),"."),(0,s.kt)("h3",{id:"mysql-metadata-mysql"},"MySQL Metadata ",(0,s.kt)("inlineCode",{parentName:"h3"},"mysql")),(0,s.kt)("p",null,"Extracts:"),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},"List of databases and tables"),(0,s.kt)("li",{parentName:"ul"},"Column types and schema associated with each table")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-yml"},'source:\n  type: mysql\n  config:\n    username: root\n    password: example\n    database: dbname\n    host_port: localhost:3306\n    table_pattern:\n      deny:\n        # Note that the deny patterns take precedence over the allow patterns.\n        - "performance_schema"\n      allow:\n        - "schema1.table2"\n      # Although the \'table_pattern\' enables you to skip everything from certain schemas,\n      # having another option to allow/deny on schema level is an optimization for the case when there is a large number\n      # of schemas that one wants to skip and you want to avoid the time to needlessly fetch those tables only to filter\n      # them out afterwards via the table_pattern.\n    schema_pattern:\n      deny:\n        - "garbage_schema"\n      allow:\n        - "schema1"\n')),(0,s.kt)("h3",{id:"microsoft-sql-server-metadata-mssql"},"Microsoft SQL Server Metadata ",(0,s.kt)("inlineCode",{parentName:"h3"},"mssql")),(0,s.kt)("p",null,"We have two options for the underlying library used to connect to SQL Server: (1) ",(0,s.kt)("a",{parentName:"p",href:"https://github.com/denisenkom/pytds"},"python-tds")," and (2) ",(0,s.kt)("a",{parentName:"p",href:"https://github.com/mkleehammer/pyodbc"},"pyodbc"),". The TDS library is pure Python and hence easier to install, but only PyODBC supports encrypted connections."),(0,s.kt)("p",null,"Extracts:"),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},"List of databases, schema, tables and views"),(0,s.kt)("li",{parentName:"ul"},"Column types associated with each table/view")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-yml"},'source:\n  type: mssql\n  config:\n    username: user\n    password: pass\n    host_port: localhost:1433\n    database: DemoDatabase\n    include_views: True # whether to include views, defaults to True\n    table_pattern:\n      deny:\n        - "^.*\\\\.sys_.*" # deny all tables that start with sys_\n      allow:\n        - "schema1.table1"\n        - "schema1.table2"\n    options:\n      # Any options specified here will be passed to SQLAlchemy\'s create_engine as kwargs.\n      # See https://docs.sqlalchemy.org/en/14/core/engines.html#sqlalchemy.create_engine for details.\n      # Many of these options are specific to the underlying database driver, so that library\'s\n      # documentation will be a good reference for what is supported. To find which dialect is likely\n      # in use, consult this table: https://docs.sqlalchemy.org/en/14/dialects/index.html.\n      charset: "utf8"\n    # If set to true, we\'ll use the pyodbc library. This requires you to have\n    # already installed the Microsoft ODBC Driver for SQL Server.\n    # See https://docs.microsoft.com/en-us/sql/connect/python/pyodbc/step-1-configure-development-environment-for-pyodbc-python-development?view=sql-server-ver15\n    use_odbc: False\n    uri_args: {}\n')),(0,s.kt)("details",null,(0,s.kt)("summary",null,"Example: using ingestion with ODBC and encryption"),(0,s.kt)("p",null,"This requires you to have already installed the Microsoft ODBC Driver for SQL Server.\nSee ",(0,s.kt)("a",{parentName:"p",href:"https://docs.microsoft.com/en-us/sql/connect/python/pyodbc/step-1-configure-development-environment-for-pyodbc-python-development?view=sql-server-ver15"},"https://docs.microsoft.com/en-us/sql/connect/python/pyodbc/step-1-configure-development-environment-for-pyodbc-python-development?view=sql-server-ver15")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-yml"},'source:\n  type: mssql\n  config:\n    # See https://docs.sqlalchemy.org/en/14/dialects/mssql.html#module-sqlalchemy.dialects.mssql.pyodbc\n    use_odbc: True\n    username: user\n    password: pass\n    host_port: localhost:1433\n    database: DemoDatabase\n    include_views: True # whether to include views, defaults to True\n    uri_args:\n      # See https://docs.microsoft.com/en-us/sql/connect/odbc/dsn-connection-string-attribute?view=sql-server-ver15\n      driver: "ODBC Driver 17 for SQL Server"\n      Encrypt: "yes"\n      TrustServerCertificate: "Yes"\n      ssl: "True"\n      # Trusted_Connection: "yes"\n'))),(0,s.kt)("h3",{id:"hive-hive"},"Hive ",(0,s.kt)("inlineCode",{parentName:"h3"},"hive")),(0,s.kt)("p",null,"Extracts:"),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},"List of databases, schema, and tables"),(0,s.kt)("li",{parentName:"ul"},"Column types associated with each table"),(0,s.kt)("li",{parentName:"ul"},"Detailed table and storage information")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-yml"},"source:\n  type: hive\n  config:\n    # For more details on authentication, see the PyHive docs:\n    # https://github.com/dropbox/PyHive#passing-session-configuration.\n    # LDAP, Kerberos, etc. are supported using connect_args, which can be\n    # added under the `options` config parameter.\n    #scheme: 'hive+http' # set this if Thrift should use the HTTP transport\n    #scheme: 'hive+https' # set this if Thrift should use the HTTP with SSL transport\n    username: user # optional\n    password: pass # optional\n    host_port: localhost:10000\n    database: DemoDatabase # optional, if not specified, ingests from all databases\n    # table_pattern/schema_pattern is same as above\n    # options is same as above\n")),(0,s.kt)("details",null,(0,s.kt)("summary",null,"Example: using ingestion with Azure HDInsight"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-yml"},'# Connecting to Microsoft Azure HDInsight using TLS.\nsource:\n  type: hive\n  config:\n    scheme: "hive+https"\n    host_port: <cluster_name>.azurehdinsight.net:443\n    username: admin\n    password: "<password>"\n    options:\n      connect_args:\n        http_path: "/hive2"\n        auth: BASIC\n    # table_pattern/schema_pattern is same as above\n'))),(0,s.kt)("h3",{id:"postgresql-postgres"},"PostgreSQL ",(0,s.kt)("inlineCode",{parentName:"h3"},"postgres")),(0,s.kt)("p",null,"Extracts:"),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},"List of databases, schema, and tables"),(0,s.kt)("li",{parentName:"ul"},"Column types associated with each table"),(0,s.kt)("li",{parentName:"ul"},"Also supports PostGIS extensions"),(0,s.kt)("li",{parentName:"ul"},"database_alias (optional) can be used to change the name of database to be ingested")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-yml"},"source:\n  type: postgres\n  config:\n    username: user\n    password: pass\n    host_port: localhost:5432\n    database: DemoDatabase\n    database_alias: DatabaseNameToBeIngested\n    include_views: True # whether to include views, defaults to True\n    # table_pattern/schema_pattern is same as above\n    # options is same as above\n")),(0,s.kt)("h3",{id:"redshift-redshift"},"Redshift ",(0,s.kt)("inlineCode",{parentName:"h3"},"redshift")),(0,s.kt)("p",null,"Extracts:"),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},"List of databases, schema, and tables"),(0,s.kt)("li",{parentName:"ul"},"Column types associated with each table"),(0,s.kt)("li",{parentName:"ul"},"Also supports PostGIS extensions")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-yml"},"source:\n  type: redshift\n  config:\n    username: user\n    password: pass\n    host_port: example.something.us-west-2.redshift.amazonaws.com:5439\n    database: DemoDatabase\n    include_views: True # whether to include views, defaults to True\n    # table_pattern/schema_pattern is same as above\n    # options is same as above\n")),(0,s.kt)("details",null,(0,s.kt)("summary",null,"Extra options when running Redshift behind a proxy"),(0,s.kt)("p",null,"This requires you to have already installed the Microsoft ODBC Driver for SQL Server.\nSee ",(0,s.kt)("a",{parentName:"p",href:"https://docs.microsoft.com/en-us/sql/connect/python/pyodbc/step-1-configure-development-environment-for-pyodbc-python-development?view=sql-server-ver15"},"https://docs.microsoft.com/en-us/sql/connect/python/pyodbc/step-1-configure-development-environment-for-pyodbc-python-development?view=sql-server-ver15")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-yml"},'source:\n  type: redshift\n  config:\n    # username, password, database, etc are all the same as above\n    host_port: my-proxy-hostname:5439\n    options:\n      connect_args:\n        sslmode: "prefer" # or "require" or "verify-ca"\n        sslrootcert: ~ # needed to unpin the AWS Redshift certificate\n'))),(0,s.kt)("h3",{id:"aws-sagemaker-sagemaker"},"AWS SageMaker ",(0,s.kt)("inlineCode",{parentName:"h3"},"sagemaker")),(0,s.kt)("p",null,"Extracts:"),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},"Feature groups"),(0,s.kt)("li",{parentName:"ul"},"Models, jobs, and lineage between the two (e.g. when jobs output a model or a model is used by a job)")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-yml"},'source:\n  type: sagemaker\n  config:\n    aws_region: # aws_region_name, i.e. "eu-west-1"\n    env: # environment for the DatasetSnapshot URN, one of "DEV", "EI", "PROD" or "CORP". Defaults to "PROD".\n\n    # Credentials. If not specified here, these are picked up according to boto3 rules.\n    # (see https://boto3.amazonaws.com/v1/documentation/api/latest/guide/credentials.html)\n    aws_access_key_id: # Optional.\n    aws_secret_access_key: # Optional.\n    aws_session_token: # Optional.\n    aws_role: # Optional (Role chaining supported by using a sorted list).\n\n    extract_feature_groups: True # if feature groups should be ingested, default True\n    extract_models: True # if models should be ingested, default True\n    extract_jobs: # if jobs should be ingested, default True for all\n      auto_ml: True\n      compilation: True\n      edge_packaging: True\n      hyper_parameter_tuning: True\n      labeling: True\n      processing: True\n      training: True\n      transform: True\n')),(0,s.kt)("h3",{id:"snowflake-snowflake"},"Snowflake ",(0,s.kt)("inlineCode",{parentName:"h3"},"snowflake")),(0,s.kt)("p",null,"Extracts:"),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},"List of databases, schema, and tables"),(0,s.kt)("li",{parentName:"ul"},"Column types associated with each table")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-yml"},'source:\n  type: snowflake\n  config:\n    username: user\n    password: pass\n    host_port: account_name\n    database_pattern:\n      # The escaping of the \\$ symbol helps us skip the environment variable substitution.\n      allow:\n        - ^MY_DEMO_DATA.*\n        - ^ANOTHER_DB_REGEX\n      deny:\n        - ^SNOWFLAKE\\$\n        - ^SNOWFLAKE_SAMPLE_DATA\\$\n    warehouse: "COMPUTE_WH" # optional\n    role: "sysadmin" # optional\n    include_views: True # whether to include views, defaults to True\n    # table_pattern/schema_pattern is same as above\n    # options is same as above\n')),(0,s.kt)("div",{className:"admonition admonition-tip alert alert--success"},(0,s.kt)("div",{parentName:"div",className:"admonition-heading"},(0,s.kt)("h5",{parentName:"div"},(0,s.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,s.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,s.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"tip")),(0,s.kt)("div",{parentName:"div",className:"admonition-content"},(0,s.kt)("p",{parentName:"div"},"You can also get fine-grained usage statistics for Snowflake using the ",(0,s.kt)("inlineCode",{parentName:"p"},"snowflake-usage")," source."))),(0,s.kt)("h3",{id:"superset-superset"},"Superset ",(0,s.kt)("inlineCode",{parentName:"h3"},"superset")),(0,s.kt)("p",null,"Extracts:"),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},"List of charts and dashboards")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-yml"},'source:\n  type: superset\n  config:\n    username: user\n    password: pass\n    provider: db | ldap\n    connect_uri: http://localhost:8088\n    env: "PROD" # Optional, default is "PROD"\n')),(0,s.kt)("p",null,"See documentation for superset's ",(0,s.kt)("inlineCode",{parentName:"p"},"/security/login")," at ",(0,s.kt)("a",{parentName:"p",href:"https://superset.apache.org/docs/rest-api"},"https://superset.apache.org/docs/rest-api")," for more details on superset's login api."),(0,s.kt)("h3",{id:"oracle-oracle"},"Oracle ",(0,s.kt)("inlineCode",{parentName:"h3"},"oracle")),(0,s.kt)("p",null,"Extracts:"),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},"List of databases, schema, and tables"),(0,s.kt)("li",{parentName:"ul"},"Column types associated with each table")),(0,s.kt)("p",null,"Using the Oracle source requires that you've also installed the correct drivers; see the ",(0,s.kt)("a",{parentName:"p",href:"https://cx-oracle.readthedocs.io/en/latest/user_guide/installation.html"},"cx_Oracle docs"),". The easiest one is the ",(0,s.kt)("a",{parentName:"p",href:"https://www.oracle.com/database/technologies/instant-client.html"},"Oracle Instant Client"),"."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-yml"},"source:\n  type: oracle\n  config:\n    # For more details on authentication, see the documentation:\n    # https://docs.sqlalchemy.org/en/14/dialects/oracle.html#dialect-oracle-cx_oracle-connect and\n    # https://cx-oracle.readthedocs.io/en/latest/user_guide/connection_handling.html#connection-strings.\n    username: user\n    password: pass\n    host_port: localhost:5432\n    database: dbname\n    service_name: svc # omit database if using this option\n    include_views: True # whether to include views, defaults to True\n    # table_pattern/schema_pattern is same as above\n    # options is same as above\n")),(0,s.kt)("h3",{id:"feast-feast"},"Feast ",(0,s.kt)("inlineCode",{parentName:"h3"},"feast")),(0,s.kt)("p",null,(0,s.kt)("strong",{parentName:"p"},"Note: Feast ingestion requires Docker to be installed.")),(0,s.kt)("p",null,"Extracts:"),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},"List of feature tables (modeled as ",(0,s.kt)("a",{parentName:"li",href:"https://github.com/linkedin/datahub/blob/master/metadata-models/src/main/pegasus/com/linkedin/ml/metadata/MLFeatureTableProperties.pdl"},(0,s.kt)("inlineCode",{parentName:"a"},"MLFeatureTable")),"s),\nfeatures (",(0,s.kt)("a",{parentName:"li",href:"https://github.com/linkedin/datahub/blob/master/metadata-models/src/main/pegasus/com/linkedin/ml/metadata/MLFeatureProperties.pdl"},(0,s.kt)("inlineCode",{parentName:"a"},"MLFeature")),"s),\nand entities (",(0,s.kt)("a",{parentName:"li",href:"https://github.com/linkedin/datahub/blob/master/metadata-models/src/main/pegasus/com/linkedin/ml/metadata/MLPrimaryKeyProperties.pdl"},(0,s.kt)("inlineCode",{parentName:"a"},"MLPrimaryKey")),"s)"),(0,s.kt)("li",{parentName:"ul"},"Column types associated with each feature and entity")),(0,s.kt)("p",null,"Note: this uses a separate Docker container to extract Feast's metadata into a JSON file, which is then\nparsed to DataHub's native objects. This was done because of a dependency conflict in the ",(0,s.kt)("inlineCode",{parentName:"p"},"feast")," module."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-yml"},'source:\n  type: feast\n  config:\n    core_url: localhost:6565 # default\n    env: "PROD" # Optional, default is "PROD"\n    use_local_build: False # Whether to build Feast ingestion image locally, default is False\n')),(0,s.kt)("h3",{id:"google-bigquery-bigquery"},"Google BigQuery ",(0,s.kt)("inlineCode",{parentName:"h3"},"bigquery")),(0,s.kt)("p",null,"Extracts:"),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},"List of databases, schema, and tables"),(0,s.kt)("li",{parentName:"ul"},"Column types associated with each table")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-yml"},'source:\n  type: bigquery\n  config:\n    project_id: project # optional - can autodetect from environment\n    options: # options is same as above\n      # See https://github.com/mxmzdlv/pybigquery#authentication for details.\n      credentials_path: "/path/to/keyfile.json" # optional\n    include_views: True # whether to include views, defaults to True\n    # table_pattern/schema_pattern is same as above\n')),(0,s.kt)("div",{className:"admonition admonition-tip alert alert--success"},(0,s.kt)("div",{parentName:"div",className:"admonition-heading"},(0,s.kt)("h5",{parentName:"div"},(0,s.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,s.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,s.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"tip")),(0,s.kt)("div",{parentName:"div",className:"admonition-content"},(0,s.kt)("p",{parentName:"div"},"You can also get fine-grained usage statistics for BigQuery using the ",(0,s.kt)("inlineCode",{parentName:"p"},"bigquery-usage")," source."))),(0,s.kt)("h3",{id:"aws-athena-athena"},"AWS Athena ",(0,s.kt)("inlineCode",{parentName:"h3"},"athena")),(0,s.kt)("p",null,"Extracts:"),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},"List of databases and tables"),(0,s.kt)("li",{parentName:"ul"},"Column types associated with each table")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-yml"},'source:\n  type: athena\n  config:\n    username: aws_access_key_id # Optional. If not specified, credentials are picked up according to boto3 rules.\n    # See https://boto3.amazonaws.com/v1/documentation/api/latest/guide/credentials.html\n    password: aws_secret_access_key # Optional.\n    database: database # Optional, defaults to "default"\n    aws_region: aws_region_name # i.e. "eu-west-1"\n    s3_staging_dir: s3_location # "s3://<bucket-name>/prefix/"\n    # The s3_staging_dir parameter is needed because Athena always writes query results to S3.\n    # See https://docs.aws.amazon.com/athena/latest/ug/querying.html\n    # However, the athena driver will transparently fetch these results as you would expect from any other sql client.\n    work_group: athena_workgroup # "primary"\n    # table_pattern/schema_pattern is same as above\n')),(0,s.kt)("h3",{id:"aws-glue-glue"},"AWS Glue ",(0,s.kt)("inlineCode",{parentName:"h3"},"glue")),(0,s.kt)("p",null,"Note: if you also have files in S3 that you'd like to ingest, we recommend you use Glue's built-in data catalog. See ",(0,s.kt)("a",{parentName:"p",href:"/docs/metadata-ingestion/s3-ingestion"},"here")," for a quick guide on how to set up a crawler on Glue and ingest the outputs with DataHub."),(0,s.kt)("p",null,"Extracts:"),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},"List of tables"),(0,s.kt)("li",{parentName:"ul"},"Column types associated with each table"),(0,s.kt)("li",{parentName:"ul"},"Table metadata, such as owner, description and parameters"),(0,s.kt)("li",{parentName:"ul"},"Jobs and their component transformations, data sources, and data sinks")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-yml"},'source:\n  type: glue\n  config:\n    aws_region: # aws_region_name, i.e. "eu-west-1"\n    extract_transforms: True # whether to ingest Glue jobs, defaults to True\n    env: # environment for the DatasetSnapshot URN, one of "DEV", "EI", "PROD" or "CORP". Defaults to "PROD".\n\n    # Filtering patterns for databases and tables to scan\n    database_pattern: # Optional, to filter databases scanned, same as schema_pattern above.\n    table_pattern: # Optional, to filter tables scanned, same as table_pattern above.\n\n    # Credentials. If not specified here, these are picked up according to boto3 rules.\n    # (see https://boto3.amazonaws.com/v1/documentation/api/latest/guide/credentials.html)\n    aws_access_key_id: # Optional.\n    aws_secret_access_key: # Optional.\n    aws_session_token: # Optional.\n    aws_role: # Optional (Role chaining supported by using a sorted list).\n')),(0,s.kt)("h3",{id:"druid-druid"},"Druid ",(0,s.kt)("inlineCode",{parentName:"h3"},"druid")),(0,s.kt)("p",null,"Extracts:"),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},"List of databases, schema, and tables"),(0,s.kt)("li",{parentName:"ul"},"Column types associated with each table")),(0,s.kt)("p",null,(0,s.kt)("strong",{parentName:"p"},"Note")," It is important to define a explicitly define deny schema pattern for internal druid databases (lookup & sys)\nif adding a schema pattern otherwise the crawler may crash before processing relevant databases.\nThis deny pattern is defined by default but is overriden by user-submitted configurations"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-yml"},'source:\n  type: druid\n  config:\n    # Point to broker address\n    host_port: localhost:8082\n    schema_pattern:\n      deny:\n        - "^(lookup|sys).*"\n    # options is same as above\n')),(0,s.kt)("h3",{id:"other-databases-using-sqlalchemy-sqlalchemy"},"Other databases using SQLAlchemy ",(0,s.kt)("inlineCode",{parentName:"h3"},"sqlalchemy")),(0,s.kt)("p",null,"The ",(0,s.kt)("inlineCode",{parentName:"p"},"sqlalchemy")," source is useful if we don't have a pre-built source for your chosen\ndatabase system, but there is an ",(0,s.kt)("a",{parentName:"p",href:"https://docs.sqlalchemy.org/en/14/dialects/"},"SQLAlchemy dialect"),"\ndefined elsewhere. In order to use this, you must ",(0,s.kt)("inlineCode",{parentName:"p"},"pip install")," the required dialect packages yourself."),(0,s.kt)("p",null,"Extracts:"),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},"List of schemas and tables"),(0,s.kt)("li",{parentName:"ul"},"Column types associated with each table")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-yml"},'source:\n  type: sqlalchemy\n  config:\n    # See https://docs.sqlalchemy.org/en/14/core/engines.html#database-urls\n    connect_uri: "dialect+driver://username:password@host:port/database"\n    options: {} # same as above\n    schema_pattern: {} # same as above\n    table_pattern: {} # same as above\n    include_views: True # whether to include views, defaults to True\n')),(0,s.kt)("h3",{id:"mongodb-mongodb"},"MongoDB ",(0,s.kt)("inlineCode",{parentName:"h3"},"mongodb")),(0,s.kt)("p",null,"Extracts:"),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},"List of databases"),(0,s.kt)("li",{parentName:"ul"},"List of collections in each database and infers schemas for each collection")),(0,s.kt)("p",null,"By default, schema inference samples 1,000 documents from each collection. Setting ",(0,s.kt)("inlineCode",{parentName:"p"},"schemaSamplingSize: null")," will scan the entire collection.\nMoreover, setting ",(0,s.kt)("inlineCode",{parentName:"p"},"useRandomSampling: False")," will sample the first documents found without random selection, which may be faster for large collections."),(0,s.kt)("p",null,"Note that ",(0,s.kt)("inlineCode",{parentName:"p"},"schemaSamplingSize")," has no effect if ",(0,s.kt)("inlineCode",{parentName:"p"},"enableSchemaInference: False")," is set."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-yml"},'source:\n  type: "mongodb"\n  config:\n    # For advanced configurations, see the MongoDB docs.\n    # https://pymongo.readthedocs.io/en/stable/examples/authentication.html\n    connect_uri: "mongodb://localhost"\n    username: admin\n    password: password\n    env: "PROD" # Optional, default is "PROD"\n    authMechanism: "DEFAULT"\n    options: {}\n    database_pattern: {}\n    collection_pattern: {}\n    enableSchemaInference: True\n    schemaSamplingSize: 1000\n    useRandomSampling: True # whether to randomly sample docs for schema or just use the first ones, True by default\n    # database_pattern/collection_pattern are similar to schema_pattern/table_pattern from above\n')),(0,s.kt)("h3",{id:"ldap-ldap"},"LDAP ",(0,s.kt)("inlineCode",{parentName:"h3"},"ldap")),(0,s.kt)("p",null,"Extracts:"),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},"List of people"),(0,s.kt)("li",{parentName:"ul"},"Names, emails, titles, and manager information for each person"),(0,s.kt)("li",{parentName:"ul"},"List of groups")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-yml"},'source:\n  type: "ldap"\n  config:\n    ldap_server: ldap://localhost\n    ldap_user: "cn=admin,dc=example,dc=org"\n    ldap_password: "admin"\n    base_dn: "dc=example,dc=org"\n    filter: "(objectClass=*)" # optional field\n    drop_missing_first_last_name: False # optional\n')),(0,s.kt)("p",null,"The ",(0,s.kt)("inlineCode",{parentName:"p"},"drop_missing_first_last_name"),' should be set to true if you\'ve got many "headless" user LDAP accounts\nfor devices or services should be excluded when they do not contain a first and last name. This will only\nimpact the ingestion of LDAP users, while LDAP groups will be unaffected by this config option.'),(0,s.kt)("h3",{id:"lookml-lookml"},"LookML ",(0,s.kt)("inlineCode",{parentName:"h3"},"lookml")),(0,s.kt)("p",null,"Note! This plugin uses a package that requires Python 3.7+!"),(0,s.kt)("p",null,"Extracts:"),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},"LookML views from model files"),(0,s.kt)("li",{parentName:"ul"},"Name, upstream table names, dimensions, measures, and dimension groups")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-yml"},'source:\n  type: "lookml"\n  config:\n    base_folder: /path/to/model/files # where the *.model.lkml and *.view.lkml files are stored\n    connection_to_platform_map: # mappings between connection names in the model files to platform names\n      connection_name: platform_name (or platform_name.database_name) # for ex. my_snowflake_conn: snowflake.my_database\n    model_pattern: {}\n    view_pattern: {}\n    env: "PROD" # optional, default is "PROD"\n    parse_table_names_from_sql: False # see note below\n    platform_name: "looker" # optional, default is "looker"\n')),(0,s.kt)("p",null,"Note! The integration can use ",(0,s.kt)("a",{parentName:"p",href:"https://pypi.org/project/sql-metadata/"},(0,s.kt)("inlineCode",{parentName:"a"},"sql-metadata"))," to try to parse the tables the\nviews depends on. As these SQL's can be complicated, and the package doesn't official support all the SQL dialects that\nLooker supports, the result might not be correct. This parsing is disabled by default, but can be enabled by setting\n",(0,s.kt)("inlineCode",{parentName:"p"},"parse_table_names_from_sql: True"),"."),(0,s.kt)("h3",{id:"looker-dashboards-looker"},"Looker dashboards ",(0,s.kt)("inlineCode",{parentName:"h3"},"looker")),(0,s.kt)("p",null,"Extracts:"),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},"Looker dashboards and dashboard elements (charts)"),(0,s.kt)("li",{parentName:"ul"},"Names, descriptions, URLs, chart types, input view for the charts")),(0,s.kt)("p",null,"See the ",(0,s.kt)("a",{parentName:"p",href:"https://docs.looker.com/reference/api-and-integration/api-auth#authentication_with_an_sdk"},"Looker authentication docs")," for the steps to create a client ID and secret."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-yml"},'source:\n  type: "looker"\n  config:\n    client_id: # Your Looker API3 client ID\n    client_secret: # Your Looker API3 client secret\n    base_url: # The url to your Looker instance: https://company.looker.com:19999 or https://looker.company.com, or similar.\n    dashboard_pattern: # supports allow/deny regexes\n    chart_pattern: # supports allow/deny regexes\n    actor: urn:li:corpuser:etl # Optional, defaults to urn:li:corpuser:etl\n    env: "PROD" # Optional, default is "PROD"\n    platform_name: "looker" # Optional, default is "looker"\n')),(0,s.kt)("h3",{id:"file-file"},"File ",(0,s.kt)("inlineCode",{parentName:"h3"},"file")),(0,s.kt)("p",null,"Pulls metadata from a previously generated file. Note that the file sink\ncan produce such files, and a number of samples are included in the\n",(0,s.kt)("a",{parentName:"p",href:"https://github.com/linkedin/datahub/blob/master/metadata-ingestion/examples/mce_files"},"examples/mce_files")," directory."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-yml"},"source:\n  type: file\n  config:\n    filename: ./path/to/mce/file.json\n")),(0,s.kt)("h3",{id:"dbt-dbt"},"dbt ",(0,s.kt)("inlineCode",{parentName:"h3"},"dbt")),(0,s.kt)("p",null,"Pull metadata from dbt artifacts files:"),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("a",{parentName:"li",href:"https://docs.getdbt.com/reference/artifacts/manifest-json"},"dbt manifest file"),(0,s.kt)("ul",{parentName:"li"},(0,s.kt)("li",{parentName:"ul"},"This file contains model, source and lineage data."))),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("a",{parentName:"li",href:"https://docs.getdbt.com/reference/artifacts/catalog-json"},"dbt catalog file"),(0,s.kt)("ul",{parentName:"li"},(0,s.kt)("li",{parentName:"ul"},"This file contains schema data."),(0,s.kt)("li",{parentName:"ul"},"dbt does not record schema data for Ephemeral models, as such datahub will show Ephemeral models in the lineage, however there will be no associated schema for Ephemeral models"))),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("a",{parentName:"li",href:"https://docs.getdbt.com/reference/artifacts/sources-json"},"dbt sources file"),(0,s.kt)("ul",{parentName:"li"},(0,s.kt)("li",{parentName:"ul"},"This file contains metadata for sources with freshness checks."),(0,s.kt)("li",{parentName:"ul"},"We transfer dbt's freshness checks to DataHub's last-modified fields."),(0,s.kt)("li",{parentName:"ul"},"Note that this file is optional \u2013 if not specified, we'll use time of ingestion instead as a proxy for time last-modified."))),(0,s.kt)("li",{parentName:"ul"},"target_platform:",(0,s.kt)("ul",{parentName:"li"},(0,s.kt)("li",{parentName:"ul"},"The data platform you are enriching with dbt metadata."),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("a",{parentName:"li",href:"https://github.com/linkedin/datahub/blob/master/gms/impl/src/main/resources/DataPlatformInfo.json"},"data platforms")))),(0,s.kt)("li",{parentName:"ul"},"load_schemas:",(0,s.kt)("ul",{parentName:"li"},(0,s.kt)("li",{parentName:"ul"},"Load schemas from dbt catalog file, not necessary when the underlying data platform already has this data."))),(0,s.kt)("li",{parentName:"ul"},"node_type_pattern:",(0,s.kt)("ul",{parentName:"li"},(0,s.kt)("li",{parentName:"ul"},"Use this filter to exclude and include node types using allow or deny method")))),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-yml"},'source:\n  type: "dbt"\n  config:\n    manifest_path: "./path/dbt/manifest_file.json"\n    catalog_path: "./path/dbt/catalog_file.json"\n    sources_path: "./path/dbt/sources_file.json" # (optional, used for freshness checks)\n    target_platform: "postgres" # optional, eg "postgres", "snowflake", etc.\n    load_schemas: True or False\n    node_type_pattern: # optional\n      deny:\n        - ^test.*\n      allow:\n        - ^.*\n')),(0,s.kt)("p",null,"Note: when ",(0,s.kt)("inlineCode",{parentName:"p"},"load_schemas")," is False, models that use ",(0,s.kt)("a",{parentName:"p",href:"https://docs.getdbt.com/reference/resource-properties/identifier"},"identifiers")," to reference their source tables are ingested using the model identifier as the model name to preserve the lineage."),(0,s.kt)("h3",{id:"google-bigquery-usage-stats-bigquery-usage"},"Google BigQuery Usage Stats ",(0,s.kt)("inlineCode",{parentName:"h3"},"bigquery-usage")),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},"Fetch a list of queries issued"),(0,s.kt)("li",{parentName:"ul"},"Fetch a list of tables and columns accessed"),(0,s.kt)("li",{parentName:"ul"},"Aggregate these statistics into buckets, by day or hour granularity")),(0,s.kt)("p",null,"Note: the client must have one of the following OAuth scopes, and should be authorized on all projects you'd like to ingest usage stats from."),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("a",{parentName:"li",href:"https://www.googleapis.com/auth/logging.read"},"https://www.googleapis.com/auth/logging.read")),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("a",{parentName:"li",href:"https://www.googleapis.com/auth/logging.admin"},"https://www.googleapis.com/auth/logging.admin")),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("a",{parentName:"li",href:"https://www.googleapis.com/auth/cloud-platform.read-only"},"https://www.googleapis.com/auth/cloud-platform.read-only")),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("a",{parentName:"li",href:"https://www.googleapis.com/auth/cloud-platform"},"https://www.googleapis.com/auth/cloud-platform"))),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-yml"},'source:\n  type: bigquery-usage\n  config:\n    projects: # optional - can autodetect a single project from the environment\n      - project_id_1\n      - project_id_2\n    options:\n      # See https://googleapis.dev/python/logging/latest/client.html for details.\n      credentials: ~ # optional - see docs\n    env: PROD\n\n    bucket_duration: "DAY"\n    start_time: ~ # defaults to the last full day in UTC (or hour)\n    end_time: ~ # defaults to the last full day in UTC (or hour)\n\n    top_n_queries: 10 # number of queries to save for each table\n')),(0,s.kt)("div",{className:"admonition admonition-note alert alert--secondary"},(0,s.kt)("div",{parentName:"div",className:"admonition-heading"},(0,s.kt)("h5",{parentName:"div"},(0,s.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,s.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,s.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"}))),"note")),(0,s.kt)("div",{parentName:"div",className:"admonition-content"},(0,s.kt)("p",{parentName:"div"},"This source only does usage statistics. To get the tables, views, and schemas in your BigQuery project, use the ",(0,s.kt)("inlineCode",{parentName:"p"},"bigquery")," source."))),(0,s.kt)("h3",{id:"snowflake-usage-stats-snowflake-usage"},"Snowflake Usage Stats ",(0,s.kt)("inlineCode",{parentName:"h3"},"snowflake-usage")),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},"Fetch a list of queries issued"),(0,s.kt)("li",{parentName:"ul"},"Fetch a list of tables and columns accessed (excludes views)"),(0,s.kt)("li",{parentName:"ul"},"Aggregate these statistics into buckets, by day or hour granularity")),(0,s.kt)("p",null,'Note: the user/role must have access to the account usage table. The "accountadmin" role has this by default, and other roles can be ',(0,s.kt)("a",{parentName:"p",href:"https://docs.snowflake.com/en/sql-reference/account-usage.html#enabling-account-usage-for-other-roles"},"granted this permission"),"."),(0,s.kt)("p",null,"Note: the underlying access history views that we use are only available in Snowflake's enterprise edition or higher."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-yml"},'source:\n  type: snowflake-usage\n  config:\n    username: user\n    password: pass\n    host_port: account_name\n    role: ACCOUNTADMIN\n    env: PROD\n\n    bucket_duration: "DAY"\n    start_time: ~ # defaults to the last full day in UTC (or hour)\n    end_time: ~ # defaults to the last full day in UTC (or hour)\n\n    top_n_queries: 10 # number of queries to save for each table\n')),(0,s.kt)("div",{className:"admonition admonition-note alert alert--secondary"},(0,s.kt)("div",{parentName:"div",className:"admonition-heading"},(0,s.kt)("h5",{parentName:"div"},(0,s.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,s.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,s.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"}))),"note")),(0,s.kt)("div",{parentName:"div",className:"admonition-content"},(0,s.kt)("p",{parentName:"div"},"This source only does usage statistics. To get the tables, views, and schemas in your Snowflake warehouse, ingest using the ",(0,s.kt)("inlineCode",{parentName:"p"},"snowflake")," source."))),(0,s.kt)("h3",{id:"kafka-connect-kafka-connect"},"Kafka Connect ",(0,s.kt)("inlineCode",{parentName:"h3"},"kafka-connect")),(0,s.kt)("p",null,"Extracts:"),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},"Kafka Connect connector as individual ",(0,s.kt)("inlineCode",{parentName:"li"},"DataFlowSnapshotClass")," entity"),(0,s.kt)("li",{parentName:"ul"},"Creating individual ",(0,s.kt)("inlineCode",{parentName:"li"},"DataJobSnapshotClass")," entity using ",(0,s.kt)("inlineCode",{parentName:"li"},"{connector_name}:{source_dataset}")," naming"),(0,s.kt)("li",{parentName:"ul"},"Lineage information between source database to Kafka topic")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-yml"},'source:\n  type: "kafka-connect"\n  config:\n    connect_uri: "http://localhost:8083"\n    cluster_name: "connect-cluster"\n    connector_patterns:\n      deny:\n        - ^denied-connector.*\n      allow:\n        - ^allowed-connector.*\n')),(0,s.kt)("p",null,"Current limitations:"),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},"Currently works only for Debezium source connectors.")),(0,s.kt)("h2",{id:"sinks"},"Sinks"),(0,s.kt)("h3",{id:"datahub-rest-datahub-rest"},"DataHub Rest ",(0,s.kt)("inlineCode",{parentName:"h3"},"datahub-rest")),(0,s.kt)("p",null,"Pushes metadata to DataHub using the GMA rest API. The advantage of the rest-based interface\nis that any errors can immediately be reported."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-yml"},'sink:\n  type: "datahub-rest"\n  config:\n    server: "http://localhost:8080"\n')),(0,s.kt)("h3",{id:"datahub-kafka-datahub-kafka"},"DataHub Kafka ",(0,s.kt)("inlineCode",{parentName:"h3"},"datahub-kafka")),(0,s.kt)("p",null,"Pushes metadata to DataHub by publishing messages to Kafka. The advantage of the Kafka-based\ninterface is that it's asynchronous and can handle higher throughput. This requires the\nDatahub mce-consumer container to be running."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-yml"},'sink:\n  type: "datahub-kafka"\n  config:\n    connection:\n      bootstrap: "localhost:9092"\n      producer_config: {} # passed to https://docs.confluent.io/platform/current/clients/confluent-kafka-python/html/index.html#confluent_kafka.SerializingProducer\n      schema_registry_url: "http://localhost:8081"\n      schema_registry_config: {} # passed to https://docs.confluent.io/platform/current/clients/confluent-kafka-python/html/index.html#confluent_kafka.schema_registry.SchemaRegistryClient\n')),(0,s.kt)("p",null,"The options in the producer config and schema registry config are passed to the Kafka SerializingProducer and SchemaRegistryClient respectively."),(0,s.kt)("p",null,"For a full example with a number of security options, see this ",(0,s.kt)("a",{parentName:"p",href:"https://github.com/linkedin/datahub/blob/master/metadata-ingestion/examples/recipes/secured_kafka.yml"},"example recipe"),"."),(0,s.kt)("h3",{id:"console-console"},"Console ",(0,s.kt)("inlineCode",{parentName:"h3"},"console")),(0,s.kt)("p",null,"Simply prints each metadata event to stdout. Useful for experimentation and debugging purposes."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-yml"},'sink:\n  type: "console"\n')),(0,s.kt)("h3",{id:"file-file-1"},"File ",(0,s.kt)("inlineCode",{parentName:"h3"},"file")),(0,s.kt)("p",null,"Outputs metadata to a file. This can be used to decouple metadata sourcing from the\nprocess of pushing it into DataHub, and is particularly useful for debugging purposes.\nNote that the file source can read files generated by this sink."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-yml"},"sink:\n  type: file\n  config:\n    filename: ./path/to/mce/file.json\n")),(0,s.kt)("h2",{id:"transformations"},"Transformations"),(0,s.kt)("p",null,"If you'd like to modify data before it reaches the ingestion sinks \u2013 for instance, adding additional owners or tags \u2013 you can use a transformer to write your own module and integrate it with DataHub."),(0,s.kt)("p",null,"Check out the ",(0,s.kt)("a",{parentName:"p",href:"/docs/metadata-ingestion/transformers"},"transformers guide")," for more info!"),(0,s.kt)("h2",{id:"using-as-a-library"},"Using as a library"),(0,s.kt)("p",null,"In some cases, you might want to construct the MetadataChangeEvents yourself but still use this framework to emit that metadata to DataHub. In this case, take a look at the emitter interfaces, which can easily be imported and called from your own code."),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("a",{parentName:"li",href:"https://github.com/linkedin/datahub/blob/master/metadata-ingestion/src/datahub/emitter/rest_emitter.py"},"DataHub emitter via REST")," (same requirements as ",(0,s.kt)("inlineCode",{parentName:"li"},"datahub-rest"),"). Basic usage ",(0,s.kt)("a",{parentName:"li",href:"https://github.com/linkedin/datahub/blob/master/metadata-ingestion/examples/library/lineage_emitter_rest.py"},"example"),"."),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("a",{parentName:"li",href:"https://github.com/linkedin/datahub/blob/master/metadata-ingestion/src/datahub/emitter/kafka_emitter.py"},"DataHub emitter via Kafka")," (same requirements as ",(0,s.kt)("inlineCode",{parentName:"li"},"datahub-kafka"),"). Basic usage ",(0,s.kt)("a",{parentName:"li",href:"https://github.com/linkedin/datahub/blob/master/metadata-ingestion/examples/library/lineage_emitter_kafka.py"},"example"),".")),(0,s.kt)("h2",{id:"lineage-with-airflow"},"Lineage with Airflow"),(0,s.kt)("p",null,"There's a couple ways to get lineage information from Airflow into DataHub."),(0,s.kt)("div",{className:"admonition admonition-note alert alert--secondary"},(0,s.kt)("div",{parentName:"div",className:"admonition-heading"},(0,s.kt)("h5",{parentName:"div"},(0,s.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,s.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,s.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"}))),"note")),(0,s.kt)("div",{parentName:"div",className:"admonition-content"},(0,s.kt)("p",{parentName:"div"},"If you're simply looking to run ingestion on a schedule, take a look at these sample DAGs:"),(0,s.kt)("ul",{parentName:"div"},(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("a",{parentName:"li",href:"https://github.com/linkedin/datahub/blob/master/metadata-ingestion/src/datahub_provider/example_dags/generic_recipe_sample_dag.py"},(0,s.kt)("inlineCode",{parentName:"a"},"generic_recipe_sample_dag.py"))," - reads a DataHub ingestion recipe file and runs it"),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("a",{parentName:"li",href:"https://github.com/linkedin/datahub/blob/master/metadata-ingestion/src/datahub_provider/example_dags/mysql_sample_dag.py"},(0,s.kt)("inlineCode",{parentName:"a"},"mysql_sample_dag.py"))," - runs a MySQL metadata ingestion pipeline using an inlined configuration.")))),(0,s.kt)("h3",{id:"using-datahubs-airflow-lineage-backend-recommended"},"Using Datahub's Airflow lineage backend (recommended)"),(0,s.kt)("div",{className:"admonition admonition-caution alert alert--warning"},(0,s.kt)("div",{parentName:"div",className:"admonition-heading"},(0,s.kt)("h5",{parentName:"div"},(0,s.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,s.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"16",height:"16",viewBox:"0 0 16 16"},(0,s.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M8.893 1.5c-.183-.31-.52-.5-.887-.5s-.703.19-.886.5L.138 13.499a.98.98 0 0 0 0 1.001c.193.31.53.501.886.501h13.964c.367 0 .704-.19.877-.5a1.03 1.03 0 0 0 .01-1.002L8.893 1.5zm.133 11.497H6.987v-2.003h2.039v2.003zm0-3.004H6.987V5.987h2.039v4.006z"}))),"caution")),(0,s.kt)("div",{parentName:"div",className:"admonition-content"},(0,s.kt)("p",{parentName:"div"},"The Airflow lineage backend is only supported in Airflow 1.10.15+ and 2.0.2+."))),(0,s.kt)("ol",null,(0,s.kt)("li",{parentName:"ol"},(0,s.kt)("p",{parentName:"li"},"First, you must configure an Airflow hook for Datahub. We support both a Datahub REST hook and a Kafka-based hook, but you only need one."),(0,s.kt)("pre",{parentName:"li"},(0,s.kt)("code",{parentName:"pre",className:"language-shell"},"# For REST-based:\nairflow connections add  --conn-type 'datahub_rest' 'datahub_rest_default' --conn-host 'http://localhost:8080'\n# For Kafka-based (standard Kafka sink config can be passed via extras):\nairflow connections add  --conn-type 'datahub_kafka' 'datahub_kafka_default' --conn-host 'broker:9092' --conn-extra '{}'\n"))),(0,s.kt)("li",{parentName:"ol"},(0,s.kt)("p",{parentName:"li"},"Add the following lines to your ",(0,s.kt)("inlineCode",{parentName:"p"},"airflow.cfg")," file."),(0,s.kt)("pre",{parentName:"li"},(0,s.kt)("code",{parentName:"pre",className:"language-ini"},'[lineage]\nbackend = datahub_provider.lineage.datahub.DatahubLineageBackend\ndatahub_kwargs = {\n    "datahub_conn_id": "datahub_rest_default",\n    "capture_ownership_info": true,\n    "capture_tags_info": true,\n    "graceful_exceptions": true }\n# The above indentation is important!\n')),(0,s.kt)("p",{parentName:"li"},(0,s.kt)("strong",{parentName:"p"},"Configuration options:")),(0,s.kt)("ul",{parentName:"li"},(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("inlineCode",{parentName:"li"},"datahub_conn_id")," (required): Usually ",(0,s.kt)("inlineCode",{parentName:"li"},"datahub_rest_default")," or ",(0,s.kt)("inlineCode",{parentName:"li"},"datahub_kafka_default"),", depending on what you named the connection in step 1."),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("inlineCode",{parentName:"li"},"capture_ownership_info")," (defaults to true): If true, the owners field of the DAG will be capture as a DataHub corpuser."),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("inlineCode",{parentName:"li"},"capture_tags_info")," (defaults to true): If true, the tags field of the DAG will be captured as DataHub tags."),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("inlineCode",{parentName:"li"},"graceful_exceptions")," (defaults to true): If set to true, most runtime errors in the lineage backend will be suppressed and will not cause the overall task to fail. Note that configuration issues will still throw exceptions."))),(0,s.kt)("li",{parentName:"ol"},(0,s.kt)("p",{parentName:"li"},"Configure ",(0,s.kt)("inlineCode",{parentName:"p"},"inlets")," and ",(0,s.kt)("inlineCode",{parentName:"p"},"outlets")," for your Airflow operators. For reference, look at the sample DAG in ",(0,s.kt)("a",{parentName:"p",href:"https://github.com/linkedin/datahub/blob/master/metadata-ingestion/src/datahub_provider/example_dags/lineage_backend_demo.py"},(0,s.kt)("inlineCode",{parentName:"a"},"lineage_backend_demo.py")),", or reference ",(0,s.kt)("a",{parentName:"p",href:"https://github.com/linkedin/datahub/blob/master/metadata-ingestion/src/datahub_provider/example_dags/lineage_backend_taskflow_demo.py"},(0,s.kt)("inlineCode",{parentName:"a"},"lineage_backend_taskflow_demo.py"))," if you're using the ",(0,s.kt)("a",{parentName:"p",href:"https://airflow.apache.org/docs/apache-airflow/stable/concepts/taskflow.html"},"TaskFlow API"),".")),(0,s.kt)("li",{parentName:"ol"},(0,s.kt)("p",{parentName:"li"},"[optional]"," Learn more about ",(0,s.kt)("a",{parentName:"p",href:"https://airflow.apache.org/docs/apache-airflow/stable/lineage.html"},"Airflow lineage"),", including shorthand notation and some automation."))),(0,s.kt)("h3",{id:"emitting-lineage-via-a-separate-operator"},"Emitting lineage via a separate operator"),(0,s.kt)("p",null,"Take a look at this sample DAG:"),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("a",{parentName:"li",href:"https://github.com/linkedin/datahub/blob/master/metadata-ingestion/src/datahub_provider/example_dags/lineage_emission_dag.py"},(0,s.kt)("inlineCode",{parentName:"a"},"lineage_emission_dag.py"))," - emits lineage using the DatahubEmitterOperator.")),(0,s.kt)("p",null,"In order to use this example, you must first configure the Datahub hook. Like in ingestion, we support a Datahub REST hook and a Kafka-based hook. See step 1 above for details."),(0,s.kt)("h2",{id:"developing"},"Developing"),(0,s.kt)("p",null,"See the guides on ",(0,s.kt)("a",{parentName:"p",href:"/docs/metadata-ingestion/developing"},"developing"),", ",(0,s.kt)("a",{parentName:"p",href:"/docs/metadata-ingestion/adding-source"},"adding a source")," and ",(0,s.kt)("a",{parentName:"p",href:"/docs/metadata-ingestion/transformers"},"using transformers"),"."))}c.isMDXComponent=!0}}]);