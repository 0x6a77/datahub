"use strict";(self.webpackChunkdocs_website=self.webpackChunkdocs_website||[]).push([[563],{4137:function(e,t,n){n.d(t,{Zo:function(){return d},kt:function(){return h}});var r=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function u(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var s=r.createContext({}),l=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},d=function(e){var t=l(e.components);return r.createElement(s.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},p=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,a=e.originalType,s=e.parentName,d=u(e,["components","mdxType","originalType","parentName"]),p=l(n),h=o,m=p["".concat(s,".").concat(h)]||p[h]||c[h]||a;return n?r.createElement(m,i(i({ref:t},d),{},{components:n})):r.createElement(m,i({ref:t},d))}));function h(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=n.length,i=new Array(a);i[0]=p;var u={};for(var s in t)hasOwnProperty.call(t,s)&&(u[s]=t[s]);u.originalType=e,u.mdxType="string"==typeof e?e:o,i[1]=u;for(var l=2;l<a;l++)i[l]=n[l];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}p.displayName="MDXCreateElement"},1156:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return u},contentTitle:function(){return s},metadata:function(){return l},toc:function(){return d},default:function(){return p}});var r=n(7462),o=n(3366),a=(n(7294),n(4137)),i=["components"],u={title:"Adding Users to DataHub",sidebar_label:"Adding Users to DataHub",slug:"/how/auth/add-users",custom_edit_url:"https://github.com/linkedin/datahub/blob/master/docs/how/auth/add-users.md"},s="Adding Users to DataHub",l={unversionedId:"docs/how/auth/add-users",id:"docs/how/auth/add-users",isDocsHomePage:!1,title:"Adding Users to DataHub",description:"Users can log into DataHub in 2 ways:",source:"@site/genDocs/docs/how/auth/add-users.md",sourceDirName:"docs/how/auth",slug:"/how/auth/add-users",permalink:"/docs/how/auth/add-users",editUrl:"https://github.com/linkedin/datahub/blob/master/docs/how/auth/add-users.md",tags:[],version:"current",frontMatter:{title:"Adding Users to DataHub",sidebar_label:"Adding Users to DataHub",slug:"/how/auth/add-users",custom_edit_url:"https://github.com/linkedin/datahub/blob/master/docs/how/auth/add-users.md"},sidebar:"overviewSidebar",previous:{title:"Search Guide",permalink:"/docs/how/search"},next:{title:"Local Development",permalink:"/docs/developers"}},d=[{value:"Step 1: Define a user.props file",id:"step-1-define-a-userprops-file",children:[],level:2},{value:"Step 2: Mount user.props file to Docker container",id:"step-2-mount-userprops-file-to-docker-container",children:[{value:"Docker Compose",id:"docker-compose",children:[],level:3},{value:"Helm",id:"helm",children:[],level:3}],level:2},{value:"URNs",id:"urns",children:[],level:2},{value:"Caveats",id:"caveats",children:[],level:2},{value:"URNs",id:"urns-1",children:[],level:2},{value:"Feedback / Questions / Concerns",id:"feedback--questions--concerns",children:[],level:2}],c={toc:d};function p(e){var t=e.components,n=(0,o.Z)(e,i);return(0,a.kt)("wrapper",(0,r.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"adding-users-to-datahub"},"Adding Users to DataHub"),(0,a.kt)("p",null,"Users can log into DataHub in 2 ways:"),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},"Static credentials"),(0,a.kt)("li",{parentName:"ol"},"Single Sign-On via ",(0,a.kt)("a",{parentName:"li",href:"https://www.google.com/search?q=openid+connect&oq=openid+connect&aqs=chrome.0.0i131i433i512j0i512l4j69i60l2j69i61.1468j0j7&sourceid=chrome&ie=UTF-8"},"OpenID Connect"))),(0,a.kt)("p",null,"Option 1 is useful for running proof-of-concept exercises, while Option 2 is highly recommended for deploying DataHub in production."),(0,a.kt)("h1",{id:"configuring-static-credentials"},"Configuring static credentials"),(0,a.kt)("h2",{id:"step-1-define-a-userprops-file"},"Step 1: Define a user.props file"),(0,a.kt)("p",null,"To define a set of username / password combinations that should be allowed to log in to DataHub, create a new file called ",(0,a.kt)("inlineCode",{parentName:"p"},"user.props"),". This file should contain username:password combinations, with 1 user per line. For example, to create a ",(0,a.kt)("inlineCode",{parentName:"p"},"user.props"),' file with 2 users, the root\n"datahub" user and a custom user "johndoe", we would define the following file:'),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"# user.props\ndatahub:rootpassword\njohndoe:johnspassword\n")),(0,a.kt)("p",null,"We strongly recommend keeping a root user named ",(0,a.kt)("inlineCode",{parentName:"p"},"datahub")," in your user.props. Otherwise, the root user will not be able to log in!"),(0,a.kt)("h2",{id:"step-2-mount-userprops-file-to-docker-container"},"Step 2: Mount user.props file to Docker container"),(0,a.kt)("p",null,"Once you've defined a ",(0,a.kt)("inlineCode",{parentName:"p"},"user.props")," file, you'll need to mount the file into the ",(0,a.kt)("inlineCode",{parentName:"p"},"datahub-frontend")," Docker container at the following path:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"/datahub-frontend/conf/user.props\n")),(0,a.kt)("h3",{id:"docker-compose"},"Docker Compose"),(0,a.kt)("p",null,"You'll need to modify the ",(0,a.kt)("inlineCode",{parentName:"p"},"docker-compose.yml")," file to mount a container volume mapping your local user.props to the standard location inside the container."),(0,a.kt)("p",null,"For example, to mount a user.props file that is stored on my local filesystem at ",(0,a.kt)("inlineCode",{parentName:"p"},"/tmp/datahub/user.props"),", we'd modify the YAML for the\n",(0,a.kt)("inlineCode",{parentName:"p"},"datahub-web-react")," config to look like the following:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-aidl"},"  datahub-frontend-react:\n    build:\n      context: ../\n      dockerfile: docker/datahub-frontend/Dockerfile\n    image: linkedin/datahub-frontend-react:${DATAHUB_VERSION:-head}\n    .....\n    # The new stuff\n    volumes:\n      - <path-to-your-user.props>:/datahub-frontend/conf/user.props\n")),(0,a.kt)("p",null,"Once you've made this change, restarting DataHub enable authentication for the configured users."),(0,a.kt)("h3",{id:"helm"},"Helm"),(0,a.kt)("p",null,"You'll need to create a Kubernetes secret, then mount the file as a volume to the ",(0,a.kt)("inlineCode",{parentName:"p"},"datahub-frontend")," pod. "),(0,a.kt)("p",null,"First, create a secret from your local ",(0,a.kt)("inlineCode",{parentName:"p"},"user.props")," file"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-shell"},"kubectl create secret generic datahub-users-secret --from-file=user.props=./<path-to-your-user.props>\n")),(0,a.kt)("p",null,"Then, configure your ",(0,a.kt)("inlineCode",{parentName:"p"},"values.yaml")," to add the volume to the ",(0,a.kt)("inlineCode",{parentName:"p"},"datahub-frontend")," container."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-YAML"},"datahub-frontend:\n  ...\n  extraVolumes:\n    - name: datahub-users\n      secret:\n        defaultMode: 0444\n        secretName:  datahub-users-secret\n  extraVolumeMounts:\n    - name: datahub-users\n      mountPath: /datahub-frontend/conf/user.props\n      subPath: user.props\n")),(0,a.kt)("p",null,"Note that if you update the secret you will need to restart the ",(0,a.kt)("inlineCode",{parentName:"p"},"datahub-frontend")," pods so the changes are reflected. To update the secret in-place you can run something like this."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-shell"},"kubectl create secret generic datahub-users-secret --from-file=user.props=./<path-to-your-user.props> -o yaml --dry-run=client | kubectl apply -f -\n")),(0,a.kt)("h2",{id:"urns"},"URNs"),(0,a.kt)("p",null,"URNs are identifiers that uniquely identify an Entity on DataHub. The usernames defined in the ",(0,a.kt)("inlineCode",{parentName:"p"},"user.props"),' file will be used to generate the DataHub user "urn", which uniquely identifies\nthe user on DataHub. The urn is computed as:'),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"urn:li:corpuser:{username}\n")),(0,a.kt)("h2",{id:"caveats"},"Caveats"),(0,a.kt)("p",null,"If you add a new username / password to the ",(0,a.kt)("inlineCode",{parentName:"p"},"user.props")," file, no other information about the user will exist\nabout the user in DataHub (full name, email, bio, etc). This means that you will not be able to search to find the user."),(0,a.kt)("p",null,"In order to add information about the user in DataHub, you can use our Python Emitter SDK to produce aspects for the CorpUser,\nwhere the URN will be computed as ",(0,a.kt)("inlineCode",{parentName:"p"},"urn:li:corpuser:{username}"),", where ",(0,a.kt)("inlineCode",{parentName:"p"},"username")," is the identifier defined in the user.props file."),(0,a.kt)("p",null,"For a more comprehensive overview of how users & groups are managed within DataHub, check out ",(0,a.kt)("a",{parentName:"p",href:"https://www.youtube.com/watch?v=8Osw6p9vDYY"},"this video"),"."),(0,a.kt)("h1",{id:"configuring-sso-via-openid-connect"},"Configuring SSO via OpenID Connect"),(0,a.kt)("p",null,"Setting up SSO via OpenID Connect means that users will be able to login to DataHub via a central Identity Provider such as"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Azure AD"),(0,a.kt)("li",{parentName:"ul"},"Okta "),(0,a.kt)("li",{parentName:"ul"},"Keycloak"),(0,a.kt)("li",{parentName:"ul"},"Ping!"),(0,a.kt)("li",{parentName:"ul"},"Google Identity")),(0,a.kt)("p",null,"and more. "),(0,a.kt)("p",null,"This option is recommended for production deployments of DataHub. For detailed information about configuring DataHub to use OIDC to\nperform authentication, check out ",(0,a.kt)("a",{parentName:"p",href:"/docs/how/auth/sso/configure-oidc-react"},"OIDC Authentication"),". "),(0,a.kt)("h2",{id:"urns-1"},"URNs"),(0,a.kt)("p",null,"URNs are identifiers that uniquely identify an Entity on DataHub. The username received from an Identity Provider\nwhen a user logs into DataHub via OIDC is used to construct a unique identifier for the user on DataHub. The urn is computed as:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"urn:li:corpuser:<extracted-username>\n")),(0,a.kt)("p",null,"For information about configuring which OIDC claim should be used as the username for Datahub, check out the ",(0,a.kt)("a",{parentName:"p",href:"/docs/how/auth/sso/configure-oidc-react"},"OIDC Authentication")," doc."),(0,a.kt)("h2",{id:"feedback--questions--concerns"},"Feedback / Questions / Concerns"),(0,a.kt)("p",null,"We want to hear from you! For any inquiries, including Feedback, Questions, or Concerns, reach out on Slack!"))}p.isMDXComponent=!0}}]);