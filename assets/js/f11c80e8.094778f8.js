(self.webpackChunkdocs_website=self.webpackChunkdocs_website||[]).push([[5609],{4137:function(e,t,a){"use strict";a.d(t,{Zo:function(){return d},kt:function(){return m}});var n=a(7294);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function i(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function o(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?i(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):i(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function l(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},i=Object.keys(e);for(n=0;n<i.length;n++)a=i[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)a=i[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var s=n.createContext({}),p=function(e){var t=n.useContext(s),a=t;return e&&(a="function"==typeof e?e(t):o(o({},t),e)),a},d=function(e){var t=p(e.components);return n.createElement(s.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},c=n.forwardRef((function(e,t){var a=e.components,r=e.mdxType,i=e.originalType,s=e.parentName,d=l(e,["components","mdxType","originalType","parentName"]),c=p(a),m=r,h=c["".concat(s,".").concat(m)]||c[m]||u[m]||i;return a?n.createElement(h,o(o({ref:t},d),{},{components:a})):n.createElement(h,o({ref:t},d))}));function m(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=a.length,o=new Array(i);o[0]=c;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:r,o[1]=l;for(var p=2;p<i;p++)o[p]=a[p];return n.createElement.apply(null,o)}return n.createElement.apply(null,a)}c.displayName="MDXCreateElement"},6901:function(e,t,a){"use strict";a.r(t),a.d(t,{frontMatter:function(){return l},contentTitle:function(){return s},metadata:function(){return p},toc:function(){return d},default:function(){return c}});var n=a(2122),r=a(9756),i=(a(7294),a(4137)),o=["components"],l={title:"DataHub GraphQL Core",sidebar_label:"GraphQL Core",slug:"/datahub-graphql-core",custom_edit_url:"https://github.com/linkedin/datahub/blob/master/datahub-graphql-core/README.md"},s=void 0,p={unversionedId:"datahub-graphql-core/README",id:"datahub-graphql-core/README",isDocsHomePage:!1,title:"DataHub GraphQL Core",description:"Notice: datahub-graphql-core is currently in beta, and as such is currently subject to backwards incompatible changes.",source:"@site/genDocs/datahub-graphql-core/README.md",sourceDirName:"datahub-graphql-core",slug:"/datahub-graphql-core",permalink:"/docs/datahub-graphql-core",editUrl:"https://github.com/linkedin/datahub/blob/master/datahub-graphql-core/README.md",version:"current",frontMatter:{title:"DataHub GraphQL Core",sidebar_label:"GraphQL Core",slug:"/datahub-graphql-core",custom_edit_url:"https://github.com/linkedin/datahub/blob/master/datahub-graphql-core/README.md"},sidebar:"overviewSidebar",previous:{title:"Frontend",permalink:"/docs/datahub-frontend"},next:{title:"Generalized Metadata Store (GMS)",permalink:"/docs/gms"}},d=[{value:"Extending the Graph",id:"extending-the-graph",children:[{value:"Near Term",id:"near-term",children:[]},{value:"Long Term",id:"long-term",children:[]}]}],u={toc:d};function c(e){var t=e.components,a=(0,r.Z)(e,o);return(0,i.kt)("wrapper",(0,n.Z)({},u,a,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"Notice: ",(0,i.kt)("inlineCode",{parentName:"p"},"datahub-graphql-core")," is currently in beta, and as such is currently subject to backwards incompatible changes. "),(0,i.kt)("h1",{id:"datahub-graphql-core"},"DataHub GraphQL Core"),(0,i.kt)("p",null,"DataHub GraphQL API is a shared lib module containing a GraphQL API on top of the GMS service layer. It exposes a graph-based representation\npermitting reads and writes against the entities and aspects on the Metadata Graph, including Datasets, CorpUsers, & more. "),(0,i.kt)("p",null,"Contained within this module are "),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("strong",{parentName:"li"},"GMS Schema"),": A GQL schema that based on GMS models, located under ",(0,i.kt)("inlineCode",{parentName:"li"},"resources/gms.graphql"),". "),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("strong",{parentName:"li"},"GMS Data Fetchers"),": Components used by the GraphQL engine to resolve individual fields in the GQL schema."),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("strong",{parentName:"li"},"GMS Data Loaders"),": Components used by the GraphQL engine to fetch data from downstream sources efficiently (by batching). "),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("strong",{parentName:"li"},"GraphQLEngine"),": A wrapper on top of the default ",(0,i.kt)("inlineCode",{parentName:"li"},"GraphQL")," object provided by ",(0,i.kt)("inlineCode",{parentName:"li"},"graphql-java"),". Provides a way to configure all of the important stuff using a simple ",(0,i.kt)("inlineCode",{parentName:"li"},"Builder API"),". "),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("strong",{parentName:"li"},"GMSGraphQLEngine"),": An engine capable of resolving the GMS schema using the data fetchers + loaders mentioned above (with no additional configuration required). ")),(0,i.kt)("p",null,'We\'ve chosen to place these components in a library module so that GraphQL servers can be deployed in multiple "modes":'),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("strong",{parentName:"li"},"Standalone"),": GraphQL facade, mainly used for programmatic access to the GMS graph from a non-Java environment"),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("strong",{parentName:"li"},"Embedded"),": Leverageable within another Java server to surface an extended GraphQL schema. For example, we use this to extend the GMS GraphQL schema in ",(0,i.kt)("inlineCode",{parentName:"li"},"datahub-frontend")," ")),(0,i.kt)("h2",{id:"extending-the-graph"},"Extending the Graph"),(0,i.kt)("h3",{id:"near-term"},"Near Term"),(0,i.kt)("p",null,"When extending the GMS graph, the following steps should be followed:"),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},"Extend ",(0,i.kt)("inlineCode",{parentName:"li"},"gms.graphql")," schema with new ",(0,i.kt)("inlineCode",{parentName:"li"},"types")," (Queries) or ",(0,i.kt)("inlineCode",{parentName:"li"},"inputs")," (Mutations). ")),(0,i.kt)("p",null,"These should generally mirror the GMS models exactly, with notable exceptions:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Maps: the GQL model must instead contain a list of { key, value } objects (e.g. Dataset.pdl 'properties' field)"),(0,i.kt)("li",{parentName:"ul"},"Foreign-Keys: Foreign-key references embedded in GMS models should be resolved if the referenced entity exists in the GQL schema,\nreplacing the key with the actual entity model. (Example: replacing the 'owner' urn field in 'Ownership' with an actual ",(0,i.kt)("inlineCode",{parentName:"li"},"CorpUser")," type)")),(0,i.kt)("ol",{start:2},(0,i.kt)("li",{parentName:"ol"},"Implement ",(0,i.kt)("inlineCode",{parentName:"li"},"DataLoaders")," for any ",(0,i.kt)("inlineCode",{parentName:"li"},"Query")," data ")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"DataLoaders should simply wrap GMS-provided clients to fetch data from GMS API.")),(0,i.kt)("ol",{start:3},(0,i.kt)("li",{parentName:"ol"},"Implement ",(0,i.kt)("inlineCode",{parentName:"li"},"Mappers")," to transform Pegasus model returned by GMS to an auto-generated GQL POJO. (under ",(0,i.kt)("inlineCode",{parentName:"li"},"/mainGeneratedGraphQL"),", generated on ",(0,i.kt)("inlineCode",{parentName:"li"},"./gradlew datahub-graphql-core:build"),") ")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"If you've followed the guidance above, these mappers should be simple, mainly\nproviding identity mappings for fields that exist in both the GQL + Pegasus POJOs."),(0,i.kt)("li",{parentName:"ul"},"In some cases, you'll need to perform small lambdas (unions, maps) to materialize the GQL object. ")),(0,i.kt)("ol",{start:4},(0,i.kt)("li",{parentName:"ol"},"Implement ",(0,i.kt)("inlineCode",{parentName:"li"},"DataFetchers")," for any entity-type fields ")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Each field which resolvers a full entity from a particular downstream GMS API should have it's owner resolver,\nwhich leverages any DataLoaders implemented in step 2 in the case of ",(0,i.kt)("inlineCode",{parentName:"li"},"Queries"),"."),(0,i.kt)("li",{parentName:"ul"},"Resolvers should always return an auto-generated GQL POJO (under ",(0,i.kt)("inlineCode",{parentName:"li"},"/mainGeneratedGraphQL"),") to minimize the risk of runtime exceptions ")),(0,i.kt)("ol",{start:5},(0,i.kt)("li",{parentName:"ol"},"Implement ",(0,i.kt)("inlineCode",{parentName:"li"},"DataFetcher")," unit tests")),(0,i.kt)("h3",{id:"long-term"},"Long Term"),(0,i.kt)("p",null,"Eventually, much of this is intended to be automatically generated from GMS models, including"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Generation of the primary entities on the GQL graph "),(0,i.kt)("li",{parentName:"ul"},"Generation of Pegasus to GQL mapper logic"),(0,i.kt)("li",{parentName:"ul"},"Generation of DataLoaders"),(0,i.kt)("li",{parentName:"ul"},"Generatation of DataFetchers (Resolvers)")))}c.isMDXComponent=!0}}]);