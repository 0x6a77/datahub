(window.webpackJsonp=window.webpackJsonp||[]).push([[26],{163:function(e,t,n){"use strict";function a(){return(a=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var a in n)Object.prototype.hasOwnProperty.call(n,a)&&(e[a]=n[a])}return e}).apply(this,arguments)}n.d(t,"a",(function(){return a}))},164:function(e,t,n){"use strict";function a(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}n.d(t,"a",(function(){return a}))},165:function(e,t,n){"use strict";n.d(t,"a",(function(){return p})),n.d(t,"b",(function(){return h}));var a=n(0),r=n.n(a);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function c(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var l=r.a.createContext({}),m=function(e){var t=r.a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},p=function(e){var t=m(e.components);return r.a.createElement(l.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.a.createElement(r.a.Fragment,{},t)}},u=r.a.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,i=e.parentName,l=c(e,["components","mdxType","originalType","parentName"]),p=m(n),u=a,h=p["".concat(i,".").concat(u)]||p[u]||d[u]||o;return n?r.a.createElement(h,s(s({ref:t},l),{},{components:n})):r.a.createElement(h,s({ref:t},l))}));function h(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,i=new Array(o);i[0]=u;var s={};for(var c in t)hasOwnProperty.call(t,c)&&(s[c]=t[c]);s.originalType=e,s.mdxType="string"==typeof e?e:a,i[1]=s;for(var l=2;l<o;l++)i[l]=n[l];return r.a.createElement.apply(null,i)}return r.a.createElement.apply(null,n)}u.displayName="MDXCreateElement"},93:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return i})),n.d(t,"metadata",(function(){return s})),n.d(t,"rightToc",(function(){return c})),n.d(t,"default",(function(){return m}));var a=n(163),r=n(164),o=(n(0),n(165)),i={title:"What is a search document?",hide_title:!0,slug:"/what/search-document",custom_edit_url:"https://github.com/linkedin/datahub/blob/master/docs/what/search-document.md"},s={unversionedId:"docs/what/search-document",id:"docs/what/search-document",isDocsHomePage:!1,title:"What is a search document?",description:"What is a search document?",source:"@site/genDocs/docs/what/search-document.md",slug:"/what/search-document",permalink:"/docs/what/search-document",editUrl:"https://github.com/linkedin/datahub/blob/master/docs/what/search-document.md",version:"current",sidebar:"overviewSidebar",previous:{title:"What is a relationship?",permalink:"/docs/what/relationship"},next:{title:"What is a snapshot?",permalink:"/docs/what/snapshot"}},c=[],l={rightToc:c};function m(e){var t=e.components,n=Object(r.a)(e,["components"]);return Object(o.b)("wrapper",Object(a.a)({},l,n,{components:t,mdxType:"MDXLayout"}),Object(o.b)("h1",{id:"what-is-a-search-document"},"What is a search document?"),Object(o.b)("p",null,Object(o.b)("a",{parentName:"p",href:"https://en.wikipedia.org/wiki/Search_engine_indexing"},"Search documents")," are also modeled using ",Object(o.b)("a",{parentName:"p",href:"https://linkedin.github.io/rest.li/pdl_schema"},"PDL")," explicitly.\nIn many ways, the model for a Document is very similar to an ",Object(o.b)("a",{parentName:"p",href:"/docs/what/entity"},"Entity")," and ",Object(o.b)("a",{parentName:"p",href:"/docs/what/relationship"},"Relationship")," model,\nwhere each attribute/field contains a value that\u2019s derived from various metadata aspects.\nHowever, a search document is also allowed to have array type of attribute that contains only primitives or enum items.\nThis is because most full-text search engines supports membership testing against an array field, e.g. an array field containing all the terms used in a document."),Object(o.b)("p",null,"One obvious use of the attributes is to perform search filtering, e.g. give me all the ",Object(o.b)("inlineCode",{parentName:"p"},"User")," whose first name or last name is similar to \u201cJoe\u201d and reports up to ",Object(o.b)("inlineCode",{parentName:"p"},"userFoo"),".\nSince the document is also served as the main interface for the search API, the attributes can also be used to format the search snippet.\nAs a result, one may be tempted to add as many attributes as needed. This is acceptable as the underlying search engine is designed to index a large number of fields."),Object(o.b)("p",null,"Below shows an example schema for the ",Object(o.b)("inlineCode",{parentName:"p"},"User")," search document. Note that:"),Object(o.b)("ol",null,Object(o.b)("li",{parentName:"ol"},"Each search document is required to have a type-specific ",Object(o.b)("inlineCode",{parentName:"li"},"urn")," field, generally maps to an entity in the ",Object(o.b)("a",{parentName:"li",href:"/docs/what/graph"},"graph"),"."),Object(o.b)("li",{parentName:"ol"},"Similar to ",Object(o.b)("inlineCode",{parentName:"li"},"Entity"),", each document has an optional ",Object(o.b)("inlineCode",{parentName:"li"},"removed"),' field for "soft deletion".\nThis is captured in ',Object(o.b)("a",{parentName:"li",href:"https://github.com/linkedin/datahub/blob/master/metadata-models/src/main/pegasus/com/linkedin/metadata/search/BaseDocument.pdl"},"BaseDocument"),", which is expected to be included by all documents."),Object(o.b)("li",{parentName:"ol"},"Similar to ",Object(o.b)("inlineCode",{parentName:"li"},"Entity"),", all remaining fields are made ",Object(o.b)("inlineCode",{parentName:"li"},"optional")," to support partial updates."),Object(o.b)("li",{parentName:"ol"},Object(o.b)("inlineCode",{parentName:"li"},"management")," shows an example of a string array field."),Object(o.b)("li",{parentName:"ol"},Object(o.b)("inlineCode",{parentName:"li"},"ownedDataset")," shows an example on how a field can be derived from metadata ",Object(o.b)("a",{parentName:"li",href:"/docs/what/aspect"},"aspects")," associated with other types of entity (in this case, ",Object(o.b)("inlineCode",{parentName:"li"},"Dataset"),").")),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre"},"namespace com.linkedin.metadata.search\n\n/**\n * Common fields that may apply to all documents\n */\nrecord BaseDocument {\n\n  /** Whether the entity has been removed or not */\n  removed: optional boolean = false\n}\n")),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre"},"namespace com.linkedin.metadata.search\n\nimport com.linkedin.common.CorpuserUrn\nimport com.linkedin.common.DatasetUrn\n\n/**\n * Data model for user entity search\n */\nrecord UserDocument includes BaseDocument {\n\n  /** Urn for the user */\n  urn: CorpuserUrn\n\n  /** First name of the user */\n  firstName: optional string\n\n  /** Last name of the user */\n  lastName: optional string\n\n  /** The chain of management all the way to CEO */\n  management: optional array[CorpuserUrn] = []  \n\n  /** Code for the cost center */\n  costCenter: optional int\n\n  /** The list of dataset the user owns */\n  ownedDatasets: optional array[DatasetUrn] = []  \n}\n")))}m.isMDXComponent=!0}}]);