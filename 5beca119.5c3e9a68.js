(window.webpackJsonp=window.webpackJsonp||[]).push([[37],{104:function(e,t,a){"use strict";a.r(t),a.d(t,"frontMatter",(function(){return s})),a.d(t,"metadata",(function(){return c})),a.d(t,"rightToc",(function(){return o})),a.d(t,"default",(function(){return d}));var n=a(158),r=a(159),i=(a(0),a(160)),s={title:"Metadata Serving Architecture",hide_title:!0,slug:"/architecture/metadata-serving",custom_edit_url:"https://github.com/linkedin/datahub/blob/master/docs/architecture/metadata-serving.md"},c={unversionedId:"docs/architecture/metadata-serving",id:"docs/architecture/metadata-serving",isDocsHomePage:!1,title:"Metadata Serving Architecture",description:"Metadata Serving Architecture",source:"@site/genDocs/docs/architecture/metadata-serving.md",slug:"/architecture/metadata-serving",permalink:"/docs/architecture/metadata-serving",editUrl:"https://github.com/linkedin/datahub/blob/master/docs/architecture/metadata-serving.md",version:"current",sidebar:"overviewSidebar",previous:{title:"What is Generalized Metadata Architecture (GMA)?",permalink:"/docs/what/gma"},next:{title:"What is Generalized Metadata Service (GMS)?",permalink:"/docs/what/gms"}},o=[{value:"Key-value DAO (Local DAO)",id:"key-value-dao-local-dao",children:[]},{value:"Search DAO",id:"search-dao",children:[]},{value:"Query DAO",id:"query-dao",children:[]},{value:"Remote DAO",id:"remote-dao",children:[]}],l={rightToc:o};function d(e){var t=e.components,s=Object(r.a)(e,["components"]);return Object(i.b)("wrapper",Object(n.a)({},l,s,{components:t,mdxType:"MDXLayout"}),Object(i.b)("h1",{id:"metadata-serving-architecture"},"Metadata Serving Architecture"),Object(i.b)("p",null,"This section describes how metadata is served in GMA. In particular, it demonstrates how GMA can efficiently service different types of queries, including key-value, complex queries, and full text search.\nBelow shows a high-level system diagram for the metadata serving architecture."),Object(i.b)("p",null,Object(i.b)("img",{alt:"metadata-serving",src:a(234).default})),Object(i.b)("p",null,"There are four types of Data Access Object (",Object(i.b)("a",{parentName:"p",href:"https://en.wikipedia.org/wiki/Data_access_object"},"DAO"),") that standardize the way metadata is accessed.\nThis section describes each type of DAO, its purpose, and the interface. "),Object(i.b)("p",null,"These DAOs rely heavily on ",Object(i.b)("a",{parentName:"p",href:"https://docs.oracle.com/javase/tutorial/extra/generics/index.html"},"Java Generics")," so that the core logics can remain type-neutral.\nHowever, as there\u2019s no inheritance in ",Object(i.b)("a",{parentName:"p",href:"https://linkedin.github.io/rest.li/DATA-Data-Schema-and-Templates"},"Pegasus"),", the generics often fallback to extending ",Object(i.b)("a",{parentName:"p",href:"https://github.com/linkedin/rest.li/blob/master/data/src/main/java/com/linkedin/data/template/RecordTemplate.java"},"RecordTemplate")," instead of the desired types (i.e. ",Object(i.b)("a",{parentName:"p",href:"/docs/what/entity"},"entity"),", ",Object(i.b)("a",{parentName:"p",href:"/docs/what/relationship"},"relationship"),", metadata ",Object(i.b)("a",{parentName:"p",href:"/docs/what/aspect"},"aspect")," etc). Additional runtime type checking has been added to the DAOs to avoid binding to unexpected types. We also cache the type checking result to minimize runtime overhead."),Object(i.b)("h2",{id:"key-value-dao-local-dao"},"Key-value DAO (Local DAO)"),Object(i.b)("p",null,Object(i.b)("a",{parentName:"p",href:"/docs/what/gms"},"GMS")," use ",Object(i.b)("a",{parentName:"p",href:"https://github.com/linkedin/datahub/blob/master/metadata-dao/src/main/java/com/linkedin/metadata/dao/BaseLocalDAO.java"},"Local DAO")," to store and retrieve metadata ",Object(i.b)("a",{parentName:"p",href:"/docs/what/aspect"},"aspect"),"s from the local document store.\nBelow shows the base class and its simple key-value interface.\nAs the DAO is a generic class, it needs to be bound to specific type during instantiation.\nEach entity type will need to instantiate its own version of DAO."),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-java"},"public abstract class BaseLocalDAO<ASPECT extends UnionTemplate> {\n\n public abstract <URN extends Urn, METADATA extends RecordTemplate> void \n  add(Class<METADATA> type, URN urn, METADATA value);\n\n public abstract <URN extends Urn, METADATA extends RecordTemplate> \n  Optional<METADATA> get(Class<METADATA> type, URN urn, int version);\n\n public abstract <URN extends Urn, METADATA extends RecordTemplate> \n  ListResult<Integer> listVersions(Class<METADATA> type, URN urn, int start, \n    int pageSize);\n\n public abstract <METADATA extends RecordTemplate> ListResult<Urn> listUrns( \n  Class<METADATA> type, int start, int pageSize);\n\n public abstract <URN extends Urn, METADATA extends RecordTemplate> \n  ListResult<METADATA> list(Class<METADATA> type, URN urn, int start, int pageSize);\n}\n")),Object(i.b)("p",null,"Another important function of ",Object(i.b)("a",{parentName:"p",href:"https://github.com/linkedin/datahub/blob/master/metadata-dao/src/main/java/com/linkedin/metadata/dao/BaseLocalDAO.java"},"Local DAO")," is to automatically emit ",Object(i.b)("a",{parentName:"p",href:"/docs/what/mxe#metadata-audit-event-mae"},"MAE"),"s whenever the metadata is updated.\nThis is doable because MAE effectively use the same ",Object(i.b)("a",{parentName:"p",href:"https://linkedin.github.io/rest.li/DATA-Data-Schema-and-Templates"},"Pegasus")," models so ",Object(i.b)("a",{parentName:"p",href:"https://github.com/linkedin/rest.li/blob/master/data/src/main/java/com/linkedin/data/template/RecordTemplate.java"},"RecordTemplate")," can be easily converted into the corresponding ",Object(i.b)("a",{parentName:"p",href:"https://github.com/apache/avro/blob/master/lang/java/avro/src/main/java/org/apache/avro/generic/GenericRecord.java"},"GenericRecord"),"."),Object(i.b)("h2",{id:"search-dao"},"Search DAO"),Object(i.b)("p",null,"Search DAO is also a generic class that can be bound to a specific type of search document.\nThe DAO provides 3 APIs:"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},"A ",Object(i.b)("inlineCode",{parentName:"li"},"search")," API that takes the search input, a ",Object(i.b)("a",{parentName:"li",href:"https://github.com/linkedin/datahub/blob/master/metadata-dao/src/main/pegasus/com/linkedin/metadata/query/Filter.pdl"},"Filter"),", a ",Object(i.b)("a",{parentName:"li",href:"https://github.com/linkedin/datahub/blob/master/metadata-dao/src/main/pegasus/com/linkedin/metadata/query/SortCriterion.pdl"},"SortCriterion"),", some pagination parameters, and returns a ",Object(i.b)("a",{parentName:"li",href:"https://github.com/linkedin/datahub/blob/master/metadata-dao/src/main/java/com/linkedin/metadata/dao/SearchResult.java"},"SearchResult"),". "),Object(i.b)("li",{parentName:"ul"},"An ",Object(i.b)("inlineCode",{parentName:"li"},"autoComplete")," API which allows typeahead-style autocomplete based on the current input and a ",Object(i.b)("a",{parentName:"li",href:"https://github.com/linkedin/datahub/blob/master/metadata-dao/src/main/pegasus/com/linkedin/metadata/query/Filter.pdl"},"Filter"),", and returns ",Object(i.b)("a",{parentName:"li",href:"https://github.com/linkedin/datahub/blob/master/metadata-dao/src/main/pegasus/com/linkedin/metadata/query/AutoCompleteResult.pdl"},"AutocompleteResult"),"."),Object(i.b)("li",{parentName:"ul"},"A ",Object(i.b)("inlineCode",{parentName:"li"},"filter")," API which allows for filtering only without a search input. It takes a a ",Object(i.b)("a",{parentName:"li",href:"https://github.com/linkedin/datahub/blob/master/metadata-dao/src/main/pegasus/com/linkedin/metadata/query/Filter.pdl"},"Filter")," and a ",Object(i.b)("a",{parentName:"li",href:"https://github.com/linkedin/datahub/blob/master/metadata-dao/src/main/pegasus/com/linkedin/metadata/query/SortCriterion.pdl"},"SortCriterion")," as input and returns ",Object(i.b)("a",{parentName:"li",href:"https://github.com/linkedin/datahub/blob/master/metadata-dao/src/main/java/com/linkedin/metadata/dao/SearchResult.java"},"SearchResult"),".")),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-java"},"public abstract class BaseSearchDAO<DOCUMENT extends RecordTemplate> {\n\n  public abstract SearchResult<DOCUMENT> search(String input, Filter filter, \n        SortCriterion sortCriterion, int from, int size);\n\n  public abstract AutoCompleteResult autoComplete(String input, String field,\n        Filter filter, int limit);\n\n  public abstract SearchResult<DOCUMENT> filter(Filter filter, SortCriterion sortCriterion, \n        int from, int size);\n}\n")),Object(i.b)("h2",{id:"query-dao"},"Query DAO"),Object(i.b)("p",null,"Query DAO allows clients, e.g. ",Object(i.b)("a",{parentName:"p",href:"/docs/what/gms"},"GMS"),", ",Object(i.b)("a",{parentName:"p",href:"/docs/architecture/metadata-ingestion#mae-consumer-job"},"MAE Consumer Job")," etc, to perform both graph & non-graph queries against the metadata graph.\nFor instance, a GMS can use the Query DAO to find out \u201call the dataset owned by the users who is part of the group ",Object(i.b)("inlineCode",{parentName:"p"},"foo")," and report to ",Object(i.b)("inlineCode",{parentName:"p"},"bar"),",\u201d which naturally translates to a graph query.\nAlternatively, a client may wish to retrieve \u201call the datasets that stored under /jobs/metrics\u201d, which doesn\u2019t involve any graph traversal."),Object(i.b)("p",null,"Below is the base class for Query DAOs, which contains the ",Object(i.b)("inlineCode",{parentName:"p"},"findEntities")," and ",Object(i.b)("inlineCode",{parentName:"p"},"findRelationships")," methods.\nBoth methods also have two versions, one involves graph traversal, and the other doesn\u2019t.\nYou can use ",Object(i.b)("inlineCode",{parentName:"p"},"findMixedTypesEntities")," and ",Object(i.b)("inlineCode",{parentName:"p"},"findMixedTypesRelationships")," for queries that return a mixture of different types of entities or relationships.\nAs these methods return a list of ",Object(i.b)("a",{parentName:"p",href:"https://github.com/linkedin/rest.li/blob/master/data/src/main/java/com/linkedin/data/template/RecordTemplate.java"},"RecordTemplate"),", callers will need to manually cast them back to the specific entity type using ",Object(i.b)("a",{parentName:"p",href:"https://docs.oracle.com/javase/8/docs/api/java/lang/Class.html#isInstance-java.lang.Object-"},"isInstance()")," or reflection."),Object(i.b)("p",null,"Note that the generics (ENTITY, RELATIONSHIP) are purposely left untyped, as these types are native to the underlying graph DB and will most likely differ from one implementation to another."),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-java"},"public abstract class BaseQueryDAO<ENTITY, RELATIONSHIP> {\n\n public abstract <ENTITY extends RecordTemplate> List<ENTITY> findEntities(\n  Class<ENTITY> type, Filter filter, int offset, int count);\n\n public abstract <ENTITY extends RecordTemplate> List<ENTITY> findEntities(\n  Class<ENTITY> type, Statement function);\n\n public abstract List<RecordTemplate> findMixedTypesEntities(Statement function);\n\n public abstract <ENTITY extends RecordTemplate, RELATIONSHIP extends RecordTemplate> List<RELATIONSHIP> \n  findRelationships(Class<ENTITY> entityType, Class<RELATIONSHIP> relationshipType, Filter filter, int offset, int count);\n\n public abstract <RELATIONSHIP extends RecordTemplate> List<RELATIONSHIP> \n  findRelationships(Class<RELATIONSHIP> type, Statement function);\n\n public abstract List<RecordTemplate> findMixedTypesRelationships(\n  Statement function);\n}\n")),Object(i.b)("h2",{id:"remote-dao"},"Remote DAO"),Object(i.b)("p",null,Object(i.b)("a",{parentName:"p",href:"https://github.com/linkedin/datahub/blob/master/metadata-dao/src/main/java/com/linkedin/metadata/dao/BaseRemoteDAO.java"},"Remote DAO")," is nothing but a specialized readonly implementation of ",Object(i.b)("a",{parentName:"p",href:"https://github.com/linkedin/datahub/blob/master/metadata-dao/src/main/java/com/linkedin/metadata/dao/BaseLocalDAO.java"},"Local DAO"),".\nRather than retrieving metadata from a local storage, Remote DAO will fetch the metadata from another ",Object(i.b)("a",{parentName:"p",href:"/docs/what/gms"},"GMS"),".\nThe mapping between ",Object(i.b)("a",{parentName:"p",href:"/docs/what/entity"},"entity")," type and GMS is implemented as a hard-coded map."),Object(i.b)("p",null,"To prevent circular dependency (",Object(i.b)("a",{parentName:"p",href:"https://rest.li"},"rest.li")," service depends on remote DAO, which in turn depends on rest.li client generated by each rest.li service),\nRemote DAO will need to construct raw rest.li requests directly, instead of using each entity\u2019s rest.li request builder."))}d.isMDXComponent=!0},158:function(e,t,a){"use strict";function n(){return(n=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var a=arguments[t];for(var n in a)Object.prototype.hasOwnProperty.call(a,n)&&(e[n]=a[n])}return e}).apply(this,arguments)}a.d(t,"a",(function(){return n}))},159:function(e,t,a){"use strict";function n(e,t){if(null==e)return{};var a,n,r={},i=Object.keys(e);for(n=0;n<i.length;n++)a=i[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}a.d(t,"a",(function(){return n}))},160:function(e,t,a){"use strict";a.d(t,"a",(function(){return p})),a.d(t,"b",(function(){return u}));var n=a(0),r=a.n(n);function i(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function s(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function c(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?s(Object(a),!0).forEach((function(t){i(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):s(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function o(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},i=Object.keys(e);for(n=0;n<i.length;n++)a=i[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)a=i[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var l=r.a.createContext({}),d=function(e){var t=r.a.useContext(l),a=t;return e&&(a="function"==typeof e?e(t):c(c({},t),e)),a},p=function(e){var t=d(e.components);return r.a.createElement(l.Provider,{value:t},e.children)},b={inlineCode:"code",wrapper:function(e){var t=e.children;return r.a.createElement(r.a.Fragment,{},t)}},m=r.a.forwardRef((function(e,t){var a=e.components,n=e.mdxType,i=e.originalType,s=e.parentName,l=o(e,["components","mdxType","originalType","parentName"]),p=d(a),m=n,u=p["".concat(s,".").concat(m)]||p[m]||b[m]||i;return a?r.a.createElement(u,c(c({ref:t},l),{},{components:a})):r.a.createElement(u,c({ref:t},l))}));function u(e,t){var a=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var i=a.length,s=new Array(i);s[0]=m;var c={};for(var o in t)hasOwnProperty.call(t,o)&&(c[o]=t[o]);c.originalType=e,c.mdxType="string"==typeof e?e:n,s[1]=c;for(var l=2;l<i;l++)s[l]=a[l];return r.a.createElement.apply(null,s)}return r.a.createElement.apply(null,a)}m.displayName="MDXCreateElement"},234:function(e,t,a){"use strict";a.r(t),t.default=a.p+"assets/images/metadata-serving-b67ab624686cc9297da3d4fe3fee3a7d.png"}}]);